[{"path":"https://aphp.github.io/heemod/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://aphp.github.io/heemod/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"transition-probabilities","dir":"Articles","previous_headings":"","what":"Transition probabilities","title":"An Introduction to `heemod`","text":"probability transition one state another time period called transition probability. Said time period called cycle. Transition probabilities states can described 2-way table lines correspond states beginning cycle columns states end cycle. Consider model 2 states B: starting cycle state (row ), probability still state end cycle found colunm (cell 1) probability change state B found column B (cell 2). Similarly, starting cycle state B (row B), probability state B end cycle found cells 3 4 respectively. context Markov models, 2-way table called transition matrix. transition matrix can defined easily heemod define_transition() function. consider previous example, cell values replaced actual probabilities: transition matrix can defined following command:","code":"mat_trans <- define_transition(   .9, .1,   .2, .8 ) ## No named state -> generating names. mat_trans ## A transition matrix, 2 states. ##  ##   A   B   ## A 0.9 0.1 ## B 0.2 0.8"},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"attach-values-to-states","dir":"Articles","previous_headings":"","what":"Attach values to states","title":"An Introduction to `heemod`","text":"Values attached states. Cost utility classical examples values. continue previous example, following values can attached state B: State cost 1234 per cycle utility 0.85. State B cost 4321 per cycle utility 0.50. state values can defined define_state():","code":"state_A <- define_state(   cost = 1234,   utility = 0.85 ) state_A ## A state with 2 values. ##  ## cost = 1234 ## utility = 0.85 state_B <- define_state(   cost = 4321,   utility = 0.50 ) state_B ## A state with 2 values. ##  ## cost = 4321 ## utility = 0.5"},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"combine-information-in-a-model","dir":"Articles","previous_headings":"","what":"Combine information in a model","title":"An Introduction to `heemod`","text":"Now transition matrix state values defined given strategy, can combine define_strategy():","code":"strat <- define_strategy(   transition = mat_trans,   state_A,   state_B ) ## No named state -> generating names. strat ## A Markov model strategy: ##  ##     2 states, ##     2 state values"},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"run-the-model","dir":"Articles","previous_headings":"","what":"Run the model","title":"An Introduction to `heemod`","text":"model made one strategy, run run_model() given number cycles. run one strategy, comparison cost-effectiveness different strategies made. variables corresponding valuation cost effect must given point. default model run 1000 persons starting first state (state ).","code":"res_mod <- run_model(   strat,   cycles = 10,   cost = cost,   effect = utility ) ## No named model -> generating names. res_mod ## 1 strategy run for 10 cycles. ##  ## Initial state counts: ##  ## A = 1000L ## B = 0L ##  ## Counting method: 'life-table'. ##  ##   ##  ## Counting method: 'beginning'. ##  ##   ##  ## Counting method: 'end'. ##  ## Values: ##  ##       cost  utility ## I 19796856 7654.552"},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"analyze-results","dir":"Articles","previous_headings":"","what":"Analyze results","title":"An Introduction to `heemod`","text":"can plot state membership counts time. plot types available.  Plots can modified using ggplot2 syntax.  black & white plots publication available bw plot option  state membership counts values can accessed get_counts() get_values() respectively.","code":"plot(res_mod) library(ggplot2)  plot(res_mod) +   xlab(\"Time\") +   ylab(\"N\") +   theme_minimal() +   scale_color_brewer(     name = \"State\",     palette = \"Set1\"   ) library(ggplot2)  plot(res_mod, bw = TRUE) head(get_counts(res_mod)) ##   .strategy_names model_time state_names    count ## 1               I          1           A 950.0000 ## 2               I          2           A 865.0000 ## 3               I          3           A 805.5000 ## 4               I          4           A 763.8500 ## 5               I          5           A 734.6950 ## 6               I          6           A 714.2865 head(get_values(res_mod)) ##   model_time .strategy_names value_names   value ## 1          1               I        cost 1388350 ## 2          2               I        cost 1650745 ## 3          3               I        cost 1834422 ## 4          4               I        cost 1962995 ## 5          5               I        cost 2052997 ## 6          6               I        cost 2115998"},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"convenience-functions","dir":"Articles","previous_headings":"","what":"Convenience functions","title":"An Introduction to `heemod`","text":"Convenience functions available easily compute transition probabilities incidence rates, , RR, probabilities estimated different timeframe. Example : convert incidence rate 162 cases per 1,000 person-years 5-year probability. See ?probability see list convenience functions available.","code":"rate_to_prob(r = 162, per = 1000, to = 5) ## [1] 0.5551419"},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"external-data","dir":"Articles","previous_headings":"","what":"External data","title":"An Introduction to `heemod`","text":"Mortality rates age sex (often used transition probabilities) can downloaded online database function get_who_mr(). External data contained user-defined data frames can referenced model function look_up().","code":""},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"compare-strategies","dir":"Articles","previous_headings":"","what":"Compare strategies","title":"An Introduction to `heemod`","text":"order compare different strategies possible run model multiple strategies parallel, examples provided vignette(\"c-homogeneous\", \"heemod\") vignette(\"d-non-homogeneous\", \"heemod\").","code":""},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"time-variability","dir":"Articles","previous_headings":"","what":"Time-variability","title":"An Introduction to `heemod`","text":"Time varying transition probabilities state values available model_time state_time variables. Time-varying probabilities values explained vignette(\"b-time-dependency\", \"heemod\").","code":""},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"transition-costs","dir":"Articles","previous_headings":"","what":"Transition costs","title":"An Introduction to `heemod`","text":"Transition costs states can defined adding additional state called transition state. special case tunnel state. situation transition B (noted ->B) costs $100 reduces utility 0.1 points compared usual values B can modelled adding state B_trans. cost utility B_trans B +$100 -0.1 QALY respectively. ->B_trans equal former value ->B. ->B set 0 (transitions B must pass B_trans now ). probability stay B_trans 0, B_trans->B equal B->B similarly B_trans->* equal B->*.","code":""},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"parallel-computing","dir":"Articles","previous_headings":"","what":"Parallel computing","title":"An Introduction to `heemod`","text":"operation PSA can significantly sped using parallel computing. can done following way: Define cluster use_cluster() functions (.e. use_cluster(4) use 4 cores). Run analysis usual. stop using parallel computing use close_cluster() function. Results may vary depending machine, found speed gains quite limited beyond 4 cores.","code":""},{"path":"https://aphp.github.io/heemod/articles/a_introduction.html","id":"going-further","dir":"Articles","previous_headings":"","what":"Going further","title":"An Introduction to `heemod`","text":"Probabilistic uncertainty analysis vignette(\"e-probabilistic\", \"heemod\") deterministic sensitivity analysis vignette(\"f-sensitivity\", \"heemod\") can performed. Population-level estimates heterogeneity can computed : vignette(\"g-heterogeneity\", \"heemod\").","code":""},{"path":"https://aphp.github.io/heemod/articles/b_time_dependency.html","id":"how-to-specify-time-dependency","dir":"Articles","previous_headings":"","what":"How to specify time-dependency","title":"Time-varying values","text":"variables takes increasing values cycles, starting 1. example age individuals moment can defined Initial age + model_time. time individual spends state equal state_time. variables can used define_parameters(), define_state(), define_transition():","code":"define_parameters(   mr = exp(- state_time * lambda),   age = 50 + model_time ) ## 2 unevaluated parameters. ##  ## mr = exp(-state_time * lambda) ## age = 50 + model_time define_state(   cost = 100 - state_time,   effect = 10 ) ## A state with 2 values. ##  ## cost = 100 - state_time ## effect = 10 f <- function(x) abs(sin(x))  define_transition(   C,  f(state_time),   .1, .9 ) ## No named state -> generating names. ## A transition matrix, 2 states. ##  ##   A   B             ## A C   f(state_time) ## B 0.1 0.9"},{"path":"https://aphp.github.io/heemod/articles/b_time_dependency.html","id":"details","dir":"Articles","previous_headings":"","what":"Details","title":"Time-varying values","text":"Using model_time model change execution speed analysis. hand adding state_time may slow analysis, especially model run many cycles transition probability depends state_time.1 mitigate drawback possible limit number state expansion state_time_limit. time-varying values reach asymptotic value quite fast, unnecessary expand states . last cycle value repeated end. limit can defined globally, per state, per model state. following example probabilities kept constant 10 cycles state B 20 cycles state D strategy , 15 cycles state B strategy II.","code":"run_model(   I =  strat_1,   II = strat_2,   cycles = 100,   state_time_limit = list(     I = c(B = 10, D = 20),     II = c(B = 15)   ) )"},{"path":"https://aphp.github.io/heemod/articles/c_homogeneous.html","id":"model-description","dir":"Articles","previous_headings":"","what":"Model description","title":"Simple Markov Models (Homogeneous)","text":"example model cost effectiveness lamivudine/zidovudine combination therapy HIV infection (Chancellor, 1997 described Decision Modelling Health Economic Evaluation, page 32. sake simplicity reproduce exactly analysis book. See vignette vignette(\"-reproduction\", \"heemod\") exact reproduction analysis. model aims compare costs utilities two treatment strategies, monotherapy combined therapy. Four states described, best worst health-wise: : CD4 cells > 200 < 500 cells/mm3; B: CD4 < 200 cells/mm3, non-AIDS; C: AIDS; D: Death.","code":""},{"path":"https://aphp.github.io/heemod/articles/c_homogeneous.html","id":"transition-probabilities","dir":"Articles","previous_headings":"","what":"Transition probabilities","title":"Simple Markov Models (Homogeneous)","text":"Transition probabilities monotherapy study group rather simple implement define_transition(): combined therapy group transition probabilities multiplied \\(rr = 0.509\\), relative risk event population treated combined therapy. Since \\(rr < 1\\), combined therapy group less chance transition worst health states. probabilities stay state equal \\(1 - \\sum P_{trans}\\) \\(P_{trans}\\) probabilities change another state (transition probabilities given state must sum 1). use alias C convenient way specify probability complement, equal \\(1 - \\sum P_{trans}\\). can plot transition matrix monotherapy group:  combined therapy group:","code":"mat_mono <- define_transition(     .721, .202, .067, .010,     0,    .581, .407, .012,     0,    0,    .750, .250,     0,    0,    0,    1   ) ## No named state -> generating names. mat_mono ## A transition matrix, 4 states. ##  ##   A     B     C     D     ## A 0.721 0.202 0.067 0.01  ## B       0.581 0.407 0.012 ## C             0.75  0.25  ## D                   1 rr <- .509  mat_comb <- define_transition(     C, .202*rr, .067*rr, .010*rr,     0, C,       .407*rr, .012*rr,     0, 0,       C,       .250*rr,     0, 0,       0,       1   ) ## No named state -> generating names. mat_comb ## A transition matrix, 4 states. ##  ##   A B          C          D          ## A C 0.202 * rr 0.067 * rr 0.01 * rr  ## B   C          0.407 * rr 0.012 * rr ## C              C          0.25 * rr  ## D                         1 plot(mat_mono) ## Loading required namespace: diagram plot(mat_comb)"},{"path":"https://aphp.github.io/heemod/articles/c_homogeneous.html","id":"state-values","dir":"Articles","previous_headings":"","what":"State values","title":"Simple Markov Models (Homogeneous)","text":"costs lamivudine zidovudine defined: addition drugs costs (called cost_drugs model), state associated healthcare costs (called cost_health). Cost discounted 6% rate discount function. Efficacy study measured terms life expectancy (called life_year model). state thus value 1 life year per year, except death value 0. Life-years discounted example. cost_drug differs monotherapy combined therapy treatment groups, function dispatch_strategy() can used account . example state can defined define_state(): states monotherapy treatment group can specified way:","code":"cost_zido <- 2278 cost_lami <- 2086 state_A <- define_state(     cost_health = discount(2756, .06),     cost_drugs = discount(dispatch_strategy(       mono = cost_zido,       comb = cost_zido + cost_lami     ), .06),     cost_total = cost_health + cost_drugs,     life_year = 1   ) state_A ## A state with 4 values. ##  ## cost_health = discount(2756, 0.06) ## cost_drugs = discount(...) ## cost_total = cost_health + cost_drugs ## life_year = 1 state_B <- define_state(     cost_health = discount(3052, .06),     cost_drugs = discount(dispatch_strategy(       mono = cost_zido,       comb = cost_zido + cost_lami     ), .06),     cost_total = cost_health + cost_drugs,     life_year = 1   ) state_C <- define_state(     cost_health = discount(9007, .06),     cost_drugs = discount(dispatch_strategy(       mono = cost_zido,       comb = cost_zido + cost_lami     ), .06),     cost_total = cost_health + cost_drugs,     life_year = 1   ) state_D <- define_state(     cost_health = 0,     cost_drugs = 0,     cost_total = 0,     life_year = 0   )"},{"path":"https://aphp.github.io/heemod/articles/c_homogeneous.html","id":"strategy-definitions","dir":"Articles","previous_headings":"","what":"Strategy definitions","title":"Simple Markov Models (Homogeneous)","text":"Strategies can now defined combining transition matrix state list define_strategy(): combined therapy model:","code":"strat_mono <- define_strategy(   transition = mat_mono,   state_A,   state_B,   state_C,   state_D ) ## No named state -> generating names. strat_mono ## A Markov model strategy: ##  ##     4 states, ##     4 state values strat_comb <- define_strategy(   transition = mat_comb,   state_A,   state_B,   state_C,   state_D ) ## No named state -> generating names."},{"path":"https://aphp.github.io/heemod/articles/c_homogeneous.html","id":"running-the-model","dir":"Articles","previous_headings":"","what":"Running the model","title":"Simple Markov Models (Homogeneous)","text":"strategies can combined model run 50 years run_model(). Strategies given names (mono comb) order facilitate result interpretation. default models run 1000 persons starting first state (state ).","code":"res_mod <- run_model(   mono = strat_mono,   comb = strat_comb,   cycles = 50,   cost = cost_total,   effect = life_year )"},{"path":"https://aphp.github.io/heemod/articles/c_homogeneous.html","id":"result-interpretation","dir":"Articles","previous_headings":"","what":"Result interpretation","title":"Simple Markov Models (Homogeneous)","text":"Strategy values can compared summary() (optionally net monetary benefits can calculated threshold option): incremental cost-effectiveness ratio combined therapy strategy thus £5100 per life-year gained. counts per state can plotted model:  state:  values can also represented:  Note classic ggplot2 syntax can used modify plot appearance.","code":"summary(res_mod,         threshold = c(1000, 5000, 6000, 1e4)) ## 2 strategies run for 50 cycles. ##  ## Initial state counts: ##  ## A = 1000L ## B = 0L ## C = 0L ## D = 0L ##  ## Counting method: 'life-table'. ##  ##   ##  ## Counting method: 'beginning'. ##  ##   ##  ## Counting method: 'end'. ##  ## Values: ##  ##      cost_health cost_drugs cost_total life_year ## mono    33891136   14870957   48762093  8585.843 ## comb    48739757   44245091   92984848 17256.937 ##  ## Net monetary benefit difference: ##  ##          1000     5000     6000    10000 ## mono 35551.66 867.2847    0.000     0.00 ## comb     0.00   0.0000 7803.809 42488.19 ##  ## Efficiency frontier: ##  ## mono -> comb ##  ## Differences: ##  ##      Cost Diff. Effect Diff.    ICER Ref. ## comb   44222.75     8.671094 5100.02 mono plot(res_mod, type = \"counts\", panel = \"by_strategy\") +   xlab(\"Time\") +   theme_bw() +   scale_color_brewer(     name = \"State\",     palette = \"Set1\"   ) plot(res_mod, type = \"counts\", panel = \"by_state\") +   xlab(\"Time\") +   theme_bw() +   scale_color_brewer(     name = \"Strategy\",     palette = \"Set1\"   ) plot(res_mod, type = \"values\", panel = \"by_value\",      free_y = TRUE) +   xlab(\"Time\") +   theme_bw() +   scale_color_brewer(     name = \"Strategy\",     palette = \"Set1\"   )"},{"path":"https://aphp.github.io/heemod/articles/d_non_homogeneous.html","id":"model-description","dir":"Articles","previous_headings":"","what":"Model description","title":"Time-varying Markov Models (Non-Homogeneous)","text":"example implementation assessment new total hip replacement (THR) technology described chapter 3.5 Decision Modelling Health Economic Evaluation. detailed report available location. reports goes bit analysis. sake simplicity reproduce exactly analysis book. See vignette vignette(\"-reproduction\", \"heemod\") exact reproduction. model 5 states: Primary THR: starting state, individuals receive either standard new THR (called NP1), outcomes either success primary THR death (operative mortality rate primary THR called omrPTHR); Success primary THR: state receiving primary THR surgery successful, individuals can stay state, need THR revision, die causes; Revision primary THR: individuals whose primary THR needed revision, outcomes either success revision THR death (operative mortality rate revision THR called omrRTHR); Success revision THR: state receiving revision THR surgery successful, individuals can stay state, need THR re-revision, die causes; Death (either caused THR another cause). Two transition probabilities time-varying model: Probability death another cause increases age; Probability primary THR revision changes time.","code":""},{"path":"https://aphp.github.io/heemod/articles/d_non_homogeneous.html","id":"other-cause-death","dir":"Articles","previous_headings":"","what":"Other-Cause death","title":"Time-varying Markov Models (Non-Homogeneous)","text":"-cause death probabilities (mortality rate mr) United Kingdom taken databases using get_who_mr() function. variable sex, taking values 0 1, must recoded \"FMLE\" \"MLE\" passed function.","code":""},{"path":"https://aphp.github.io/heemod/articles/d_non_homogeneous.html","id":"thr-revision","dir":"Articles","previous_headings":"","what":"THR revision","title":"Time-varying Markov Models (Non-Homogeneous)","text":"Primary THR revision probability standard THR, called standardRR increases time following formula (Weibull distribution): \\[ P_{revision} = 1 - \\exp(\\lambda \\times ((t-1)^\\gamma-t^\\gamma)) \\] \\(t\\) time since revision, \\(\\gamma = 1.45367786\\) : \\[ \\lambda = exp(cons + ageC \\times age + maleC \\times sex) \\] \\(age\\) \\(sex\\) (female = 0, male = 1) individual characteristics, \\(cons = -5.49094\\), \\(ageC = -0.0367\\) \\(maleC = 0.768536\\). NP1 procedure standard procedure revision probability standardRR modified relative risk \\(rrNP1 = 0.260677\\). \\[ P_{revision} = 1 - \\exp(\\lambda \\times rr \\times NP1 \\times ((t-1)^\\gamma-t^\\gamma)) \\] Revision THR re-revision (rrr) probability set constant 0.04 per year.","code":""},{"path":"https://aphp.github.io/heemod/articles/d_non_homogeneous.html","id":"parameter-definition","dir":"Articles","previous_headings":"","what":"Parameter definition","title":"Time-varying Markov Models (Non-Homogeneous)","text":"key element specify time-varying elements heemod use package-defined variables model_time state_time. See vignette vignette(\"b-time-dependency\", \"heemod\") details. order build complex Markov model, parameters need defined define_parameters() (2 reasons: keep transition matrix readable, avoid repetition re-using parameters strategies). equations decribed previous section can written easily, female population (sex = 0) starting 60 years old (age_init = 60).","code":"param <- define_parameters(     age_init = 60,     sex = 0,          # age increases with cycles     age = age_init + model_time,          # operative mortality rates     omrPTHR = .02,     omrRTHR = .02,          # re-revision mortality rate     rrr = .04,          # parameters for calculating primary revision rate     cons = -5.49094,     ageC = -.0367,     maleC = .768536,     lambda = exp(cons + ageC * age_init + maleC * sex),     gamma = 1.45367786,          rrNP1 = .260677,          # revision probability of primary procedure     standardRR = 1 - exp(lambda * ((model_time - 1) ^ gamma -                                      model_time ^ gamma)),     np1RR = 1 - exp(lambda * rrNP1 * ((model_time - 1) ^ gamma -                                          model_time ^ gamma)),          # age-related mortality rate     sex_cat = ifelse(sex == 0, \"FMLE\", \"MLE\"),     mr = get_who_mr(age, sex_cat, local = TRUE),          # state values     u_SuccessP = .85,     u_RevisionTHR = .30,     u_SuccessR = .75,     c_RevisionTHR = 5294 ) param ## 20 unevaluated parameters. ##  ## age_init = 60 ## sex = 0 ## age = age_init + model_time ## omrPTHR = 0.02 ## omrRTHR = 0.02 ## rrr = 0.04 ## cons = -5.49094 ## ageC = -0.0367 ## maleC = 0.768536 ## lambda = exp(cons + ageC * age_init + maleC * sex) ## gamma = 1.45367786 ## rrNP1 = 0.260677 ## standardRR = 1 - ... ## np1RR = 1 - ... ## sex_cat = ifelse(sex == 0, \"FMLE\", \"MLE\") ## mr = get_who_mr(age, sex_cat, local = TRUE) ## u_SuccessP = 0.85 ## u_RevisionTHR = 0.3 ## u_SuccessR = 0.75 ## c_RevisionTHR = 5294"},{"path":"https://aphp.github.io/heemod/articles/d_non_homogeneous.html","id":"transition-matrix-definition","dir":"Articles","previous_headings":"","what":"Transition matrix definition","title":"Time-varying Markov Models (Non-Homogeneous)","text":"Now parameters defined, probability transitions can easily written: possible plot matrix thanks diagram package, results may always easy read.","code":"mat_standard <- define_transition(     state_names = c(       \"PrimaryTHR\",       \"SuccessP\",       \"RevisionTHR\",       \"SuccessR\",       \"Death\"     ),     0, C, 0,          0, omrPTHR,     0, C, standardRR, 0, mr,     0, 0, 0,          C, omrRTHR+mr,     0, 0, rrr,        C, mr,     0, 0, 0,          0, 1 ) mat_standard ## A transition matrix, 5 states. ##  ##             PrimaryTHR SuccessP RevisionTHR SuccessR Death        ## PrimaryTHR             C                             omrPTHR      ## SuccessP               C        standardRR           mr           ## RevisionTHR                                 C        omrRTHR + mr ## SuccessR                        rrr         C        mr           ## Death                                                1 mat_np1 <- define_transition(     state_names = c(       \"PrimaryTHR\",       \"SuccessP\",       \"RevisionTHR\",       \"SuccessR\",       \"Death\"     ),     0, C, 0,          0, omrPTHR,     0, C, np1RR,      0, mr,     0, 0, 0,          C, omrRTHR+mr,     0, 0, rrr,        C, mr,     0, 0, 0,          0, 1 ) mat_np1 ## A transition matrix, 5 states. ##  ##             PrimaryTHR SuccessP RevisionTHR SuccessR Death        ## PrimaryTHR             C                             omrPTHR      ## SuccessP               C        np1RR                mr           ## RevisionTHR                                 C        omrRTHR + mr ## SuccessR                        rrr         C        mr           ## Death                                                1 plot(mat_standard) ## Loading required namespace: diagram"},{"path":"https://aphp.github.io/heemod/articles/d_non_homogeneous.html","id":"state-strategy-definition","dir":"Articles","previous_headings":"","what":"State & strategy definition","title":"Time-varying Markov Models (Non-Homogeneous)","text":"Utilities costs associated states. model costs discounted rate 6% utilities rate 1.5%. Now parameters, transition matrix states defined can define strategies control group NP1 treatment. use define_starting_values() take account cost surgery.","code":"strat_standard <- define_strategy(   transition = mat_standard,   PrimaryTHR = define_state(     utility = 0,     cost = 0   ),   SuccessP = define_state(     utility = discount(u_SuccessP, .015),     cost = 0   ),   RevisionTHR = define_state(     utility = discount(u_RevisionTHR, .015),     cost = discount(c_RevisionTHR, .06)   ),   SuccessR = define_state(     utility = discount(u_SuccessR, .015),     cost = 0   ),   Death = define_state(     utility = 0,     cost = 0   ),   starting_values = define_starting_values(     cost = 394   ) ) strat_standard ## A Markov model strategy: ##  ##     5 states, ##     2 state values strat_np1 <- define_strategy(   transition = mat_np1,   PrimaryTHR = define_state(     utility = 0,     cost = 0   ),   SuccessP = define_state(     utility = discount(u_SuccessP, .015),     cost = 0   ),   RevisionTHR = define_state(     utility = discount(u_RevisionTHR, .015),     cost = discount(c_RevisionTHR, .06)   ),   SuccessR = define_state(     utility = discount(u_SuccessR, .015),     cost = 0   ),   Death = define_state(     utility = 0,     cost = 0   ),   starting_values = define_starting_values(     cost = 579   ) ) strat_np1 ## A Markov model strategy: ##  ##     5 states, ##     2 state values"},{"path":"https://aphp.github.io/heemod/articles/d_non_homogeneous.html","id":"model-analysis","dir":"Articles","previous_headings":"","what":"Model analysis","title":"Time-varying Markov Models (Non-Homogeneous)","text":"strategies can now run 60 years. default models computed 1000 person starting PrimaryTHR. comparison strategies can done summary(). incremental cost effect displayed columns Cost Effect. new treatment costs £1366 per QALY gained. noted result differs original study. difference explained higher population-level -causes mortality rates original study database (used ). See vignette vignette(\"-reproduction\", \"heemod\") exact reproduction analysis. can plot counts per state:","code":"res_mod <- run_model(   standard = strat_standard,   np1      = strat_np1,   parameters = param,   cycles = 60,   cost = cost,   effect = utility ) ## Fetching mortality data from package cached data. ## Using cached data from year 2019. summary(res_mod) ## 2 strategies run for 60 cycles. ##  ## Initial state counts: ##  ## PrimaryTHR = 1000L ## SuccessP = 0L ## RevisionTHR = 0L ## SuccessR = 0L ## Death = 0L ##  ## Counting method: 'life-table'. ##  ##   ##  ## Counting method: 'beginning'. ##  ##   ##  ## Counting method: 'end'. ##  ## Values: ##  ##           utility     cost ## standard 16949.57 535002.2 ## np1      17009.10 616348.5 ##  ## Efficiency frontier: ##  ## standard -> np1 ##  ## Differences: ##  ##     Cost Diff. Effect Diff.     ICER     Ref. ## np1    81.3463   0.05953445 1366.374 standard plot(res_mod, type = \"counts\", panel = \"by_state\", free_y = TRUE) +   theme_bw() +   scale_color_brewer(     name = \"Strategy\",     palette = \"Set1\"   ) ## Scale for colour is already present. ## Adding another scale for colour, which will replace the existing scale."},{"path":"https://aphp.github.io/heemod/articles/e_probabilistic.html","id":"model-definition","dir":"Articles","previous_headings":"","what":"Model definition","title":"Probabilistic Uncertainty Analysis","text":"start re-specifying deterministic model HIV therapy described previously (monotherapy strategy mono combined therapy strategy comb). instead defining transition probabilities state values directly define_transition() define_state() (previous vignette), parameters defined first define_parameters() step. parameters defined way can resampled probabilistic analysis. need define p_AA_mono p_AA_comb define_parameters() need resample value. values defined define_parameters() can resampled. use complement alias C specify p_AA_comb define_transition(), . State definition remains example. Strategies must first defined run standard deterministic analysis.","code":"param <- define_parameters(   rr = .509,      p_AA_mono = .721,   p_AB_mono = .202,   p_AC_mono = .067,   p_AD_mono = .010,      p_BC_mono = .407,   p_BD_mono = .012,      p_CD_mono = .250,         p_AB_comb = p_AB_mono * rr,   p_AC_comb = p_AC_mono * rr,   p_AD_comb = p_AD_mono * rr,      p_BC_comb = p_BC_mono * rr,   p_BD_comb = p_BD_mono * rr,      p_CD_comb = p_CD_mono * rr,      p_AA_comb = 1 - (p_AB_comb + p_AC_comb + p_AD_comb),         cost_zido = 2278,   cost_lami = 2086,      cost_A = 2756,   cost_B = 3052,   cost_C = 9007 ) mat_trans_mono <- define_transition(   p_AA_mono, p_AB_mono, p_AC_mono, p_AD_mono,   0,         C,         p_BC_mono, p_BD_mono,   0,         0,         C,         p_CD_mono,   0,         0,         0,         1 ) #> No named state -> generating names. mat_trans_comb <- define_transition(   p_AA_comb, p_AB_comb, p_AC_comb, p_AD_comb,   0,         C,         p_BC_comb, p_BD_comb,   0,         0,         C,         p_CD_comb,   0,         0,         0,         1 ) #> No named state -> generating names. state_A <- define_state(     cost_health = 2756,     cost_drugs = dispatch_strategy(       mono = cost_zido,       comb = cost_zido + cost_lami     ),     cost_total = discount(cost_health + cost_drugs, .06),     life_year = 1   ) state_B <- define_state(     cost_health = 3052,     cost_drugs = dispatch_strategy(       mono = cost_zido,       comb = cost_zido + cost_lami     ),     cost_total = discount(cost_health + cost_drugs, .06),     life_year = 1   ) state_C <- define_state(     cost_health = 9007,     cost_drugs = dispatch_strategy(       mono = cost_zido,       comb = cost_zido + cost_lami     ),     cost_total = discount(cost_health + cost_drugs, .06),     life_year = 1   ) state_D <- define_state(     cost_health = 0,     cost_drugs = 0,     cost_total = discount(cost_health + cost_drugs, .06),     life_year = 0   ) strat_mono <- define_strategy(   transition = mat_trans_mono,   state_A,   state_B,   state_C,   state_D ) #> No named state -> generating names.  strat_comb <- define_strategy(   transition = mat_trans_comb,   state_A,   state_B,   state_C,   state_D ) #> No named state -> generating names.  res_mod <- run_model(   mono = strat_mono,   comb = strat_comb,   parameters = param,   cycles = 50,   cost = cost_total,   effect = life_year )"},{"path":"https://aphp.github.io/heemod/articles/e_probabilistic.html","id":"resampling-distributions","dir":"Articles","previous_headings":"","what":"Resampling distributions","title":"Probabilistic Uncertainty Analysis","text":"Now can define resampling distributions. following parameters resampled: Relative risk. Costs (cost always positive). Transition probability AIDS death. transition probabilities state . Since log relative risk follows lognormal distribution, relative risk follows lognormal distribution whose mean rr standard deviation log scale can deduced relative risk confidence interval. \\[rr \\sim lognormal(\\mu = .509, \\sigma = .173)\\] Programmed : Usually costs resampled gamma distribution, property always positive. Shape scale parameters gamma distribution can calculated mean standard deviation desired distribution. assume mean = variance. \\[cost_A \\sim \\Gamma(\\mu = 2756, \\sigma = \\sqrt{2756})\\] can programmed : Proportions follow binomial distribution can estimated giving mean proportion size sample used estimate proportion p_CD ~ binomial(prob = .25, size = 40). Finally multinomial distributions declared number individuals group sample used estimate proportions. proportions follow Dirichlet distribution: p_AA + p_AB + p_AC + p_AD ~ multinomial(721, 202, 67, 10)","code":"rr ~ lognormal(mean = .509, sdlog = .173) cost_A ~ gamma(mean = 2756, sd = sqrt(2756)) rsp <- define_psa(   rr ~ lognormal(mean = .509, sdlog = .173),      cost_A ~ gamma(mean = 2756, sd = sqrt(2756)),   cost_B ~ gamma(mean = 3052, sd = sqrt(3052)),   cost_C ~ gamma(mean = 9007, sd = sqrt(9007)),      p_CD_mono ~ binomial(prob = .25, size = 40),      p_AA_mono + p_AB_mono + p_AC_mono + p_AD_mono ~ multinomial(721, 202, 67, 10) )"},{"path":"https://aphp.github.io/heemod/articles/e_probabilistic.html","id":"run-probabilistic-model","dir":"Articles","previous_headings":"","what":"Run probabilistic model","title":"Probabilistic Uncertainty Analysis","text":"Now distributions parameters set can simply run probabilistic model follow: average results computed. theory values accurate simple estimates non-linearities. optional threshold can passed summary() compute net monetary benefit.","code":"pm <- run_psa(   model = res_mod,   psa = rsp,   N = 100 ) #> Resampling strategy 'mono'... #> Resampling strategy 'mono'... #> Resampling strategy 'comb'... #> Resampling strategy 'comb'... summary(   pm,    threshold = c(1000, 5000, 6000, 1e4)) #> 2 strategies run for 50 cycles. #>  #> Initial state counts: #>  #> A = 1000L #> B = 0L #> C = 0L #> D = 0L #>  #> Counting method: 'life-table'. #>  #>   #>  #> Counting method: 'beginning'. #>  #>   #>  #> Counting method: 'end'. #>  #> Values: #>  #>      cost_health cost_drugs cost_total life_year #> comb   103768023   80671298   95537684 18485.632 #> mono    52207517   20633563   51098515  9057.754 #>  #> Net monetary benefit difference: #>  #>          1000     5000    6000    10000 #> mono 35011.29    0.000     0.0     0.00 #> comb     0.00 2700.222 12128.1 49839.61 #>  #> Efficiency frontier: #>  #> mono -> comb #>  #> Differences: #>  #>      Cost Diff. Effect Diff.     ICER Ref. #> comb   44439.17     9.427878 4713.592 mono"},{"path":"https://aphp.github.io/heemod/articles/e_probabilistic.html","id":"result-interpretation","dir":"Articles","previous_headings":"","what":"Result interpretation","title":"Probabilistic Uncertainty Analysis","text":"results analysis can plotted cost-effectiveness plane. can see seem little uncertainty costs compared uncertainty effects, resulting uncertainty cloud looks like line.  cost-effectiveness acceptability curves EVPI:   covariance analysis can performed strategy results:  difference strategies:  usual plots can modified standard ggplot2 syntax.","code":"plot(pm, type = \"ce\") plot(pm, type = \"ac\", max_wtp = 10000, log_scale = FALSE) plot(pm, type = \"evpi\", max_wtp = 10000, log_scale = FALSE) plot(pm, type = \"cov\") #> Loading required namespace: mgcv plot(pm, type = \"cov\", diff = TRUE, threshold = 5000) library(ggplot2)  plot(pm, type = \"ce\") +   xlab(\"Life-years gained\") +   ylab(\"Additional cost\") +   scale_color_brewer(     name = \"Strategy\",     palette = \"Set1\"   ) +   theme_minimal()"},{"path":"https://aphp.github.io/heemod/articles/e_probabilistic.html","id":"parallel-computing","dir":"Articles","previous_headings":"","what":"Parallel computing","title":"Probabilistic Uncertainty Analysis","text":"Resampling can significantly sped using parallel computing. can done following way: Define cluster use_cluster() functions (.e. use_cluster(4) use 4 cores). Run analysis usual. stop using parallel computing use close_cluster() function. Results may vary depending machine, found speed gains quite limited beyond 4 cores.","code":""},{"path":"https://aphp.github.io/heemod/articles/e_probabilistic.html","id":"interface-with-bcea-and-savi","dir":"Articles","previous_headings":"","what":"Interface with BCEA and SAVI","title":"Probabilistic Uncertainty Analysis","text":"compute EVPPI results can also exported export_savi() format compatible SAVI software (Sheffield Accelerated Value Information). results can post-processed BCEA package run_bcea() function.","code":"bcea <- run_bcea(pm, plot = TRUE, Kmax = 10000) #> Loading required namespace: BCEA #> Registered S3 method overwritten by 'BCEA': #>   method     from #>   plot.evppi voi #> No reference selected. Defaulting to first intervention. summary(bcea) #> NB: k (wtp) is defined in the interval [0 - 10000] #>  #>  #> Cost-effectiveness analysis summary  #>  #> Reference intervention:  comb #> Comparator intervention: mono #>  #> Optimal decision: choose comb for k < 4720 and mono for k >= 4720 #>  #>  #> Analysis for willingness to pay parameter k = 10000 #>  #>      Expected net benefit #> comb             39479023 #> mono             89318635 #>  #>                    EIB CEAC   ICER #> comb vs mono -49839612 0.01 4713.6 #>  #> Optimal intervention (max expected net benefit) for k = 10000: mono #>            #> EVPI 10513"},{"path":"https://aphp.github.io/heemod/articles/f_sensitivity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Deterministic Sensitivity Analysis","text":"objective deterministic sensitivity analysis assess model results sensitive parameter values. Parameter values changed upper lower bounds, results reported. Sensitivity analysis distinct probabilistic uncertainty analysis: whereas PSA objective estimate effect global uncertainty model results, DSA objective assess sensitivity results variations individual parameters. analyses complementary.","code":""},{"path":"https://aphp.github.io/heemod/articles/f_sensitivity.html","id":"define-the-analysis","dir":"Articles","previous_headings":"","what":"Define the analysis","title":"Deterministic Sensitivity Analysis","text":"example uses HIV drug model defined vignette(\"e-probabilistic\", \"heemod\"). See vignette explanation model. Note PSA, parameters need defined define_parameters() order modified DSA. example study sensitivity cost 4 parameters: rr, relative risk associated new treatment. cost_zido cost_lami, drug costs. dr, discount rate. Upper lower values parameters given define_dsa(). run sensitivity analysis run_dsa(), using res_mod result run_model() input.","code":"se <- define_dsa(   rr, .4, .6,      cost_zido, 1500, 3000,   cost_lami, 1500, 3000,      dr, .04, .08 ) res_dsa <- run_dsa(   model = res_mod,   dsa = se ) ## Running DSA on strategy 'mono'... ## Running DSA on strategy 'comb'..."},{"path":"https://aphp.github.io/heemod/articles/f_sensitivity.html","id":"interpretation","dir":"Articles","previous_headings":"","what":"Interpretation","title":"Deterministic Sensitivity Analysis","text":"results can displayed table. Two distinct plot types available. basic plot (type = \"simple\") displays cost variations model, around base cost. expected mono model costs sensitive cost_lami, since drug given group. Similarly sensitive rr, parameters modifies transition probabilities model.  hand comb model cost sensitive 4 parameters.  effectiveness sensitive rr  difference plot (type = \"difference\") displays difference specified model comb reference model mono.   also possible leave high low parameter values plot:","code":"res_dsa ## A sensitivity analysis on 4 parameters. ##  ## Parameters: ##   -rr ##   -cost_zido ##   -cost_lami ##   -dr ##  ## Sensitivity analysis: ##  ##                        cost_health cost_drugs cost_total life_year .n_indiv ## mono, cost_lami = 1500 46725886    19279596   48417031    8463.387 1000     ## comb, cost_lami = 1500 71019861    53642502   79593035   14198.651 1000     ## mono, cost_lami = 3000 46725886    19279596   48417031    8463.387 1000     ## comb, cost_lami = 3000 71019861    74940478   93812382   14198.651 1000     ## mono, cost_zido = 1500 46725886    12695081   43363208    8463.387 1000     ## comb, cost_zido = 1500 71019861    50916361   77772959   14198.651 1000     ## mono, cost_zido = 3000 46725886    25390162   53107083    8463.387 1000     ## comb, cost_zido = 3000 71019861    72214337   91992306   14198.651 1000     ## mono, dr = 0.04        46725886    19279596   53238469    8463.387 1000     ## comb, dr = 0.04        71019861    61962911   97480846   14198.651 1000     ## mono, dr = 0.08        46725886    19279596   44351921    8463.387 1000     ## comb, dr = 0.08        71019861    61962911   75259528   14198.651 1000     ## mono, rr = 0.4         46725886    19279596   48417031    8463.387 1000     ## comb, rr = 0.4         74749377    69178956   89573275   15852.190 1000     ## mono, rr = 0.6         46725886    19279596   48417031    8463.387 1000     ## comb, rr = 0.6         66652719    56216918   80800674   12881.970 1000     ##                        .par_value_eval Cost     Effect   ICER     Cost Diff. ## mono, cost_lami = 1500 1500.00             0.00 0.000000 -        -          ## comb, cost_lami = 1500 1500.00         31176.00 5.735263 5435.845 31176.00   ## mono, cost_lami = 3000 3000.00             0.00 0.000000 -        -          ## comb, cost_lami = 3000 3000.00         45395.35 5.735263 7915.129 45395.35   ## mono, cost_zido = 1500 1500.00             0.00 0.000000 -        -          ## comb, cost_zido = 1500 1500.00         34409.75 5.735263 5999.681 34409.75   ## mono, cost_zido = 3000 3000.00             0.00 0.000000 -        -          ## comb, cost_zido = 3000 3000.00         38885.22 5.735263 6780.024 38885.22   ## mono, dr = 0.04           0.04             0.00 0.000000 -        -          ## comb, dr = 0.04           0.04         44242.38 5.735263 7714.097 44242.38   ## mono, dr = 0.08           0.08             0.00 0.000000 -        -          ## comb, dr = 0.08           0.08         30907.61 5.735263 5389.047 30907.61   ## mono, rr = 0.4            0.40             0.00 0.000000 -        -          ## comb, rr = 0.4            0.40         41156.24 7.388802 5570.083 41156.24   ## mono, rr = 0.6            0.60             0.00 0.000000 -        -          ## comb, rr = 0.6            0.60         32383.64 4.418583 7328.966 32383.64   ##                        Effect Diff. Ref. .nmb     .dnmb    ## mono, cost_lami = 1500 -            -         0.0 -        ## comb, cost_lami = 1500 5.735263     mono 140881.9 140881.9 ## mono, cost_lami = 3000 -            -         0.0 -        ## comb, cost_lami = 3000 5.735263     mono 126662.5 126662.5 ## mono, cost_zido = 1500 -            -         0.0 -        ## comb, cost_zido = 1500 5.735263     mono 137648.1 137648.1 ## mono, cost_zido = 3000 -            -         0.0 -        ## comb, cost_zido = 3000 5.735263     mono 133172.7 133172.7 ## mono, dr = 0.04        -            -         0.0 -        ## comb, dr = 0.04        5.735263     mono 127815.5 127815.5 ## mono, dr = 0.08        -            -         0.0 -        ## comb, dr = 0.08        5.735263     mono 141150.3 141150.3 ## mono, rr = 0.4         -            -         0.0 -        ## comb, rr = 0.4         7.388802     mono 180507.8 180507.8 ## mono, rr = 0.6         -            -         0.0 -        ## comb, rr = 0.6         4.418583     mono 100173.8 100173.8 plot(res_dsa,      strategy = \"mono\",      result = \"cost\",      type = \"simple\") plot(res_dsa,      strategy = \"comb\",      result = \"cost\",      type = \"simple\") plot(res_dsa,       strategy = \"comb\",      result = \"effect\",      type = \"simple\") plot(res_dsa,      strategy = \"comb\",      result = \"cost\",      type = \"difference\") plot(res_dsa,      strategy = \"comb\",      result = \"icer\",      type = \"difference\") plot(res_dsa,      strategy = \"comb\",      result = \"icer\",      type = \"difference\",      limits_by_bars = FALSE)"},{"path":"https://aphp.github.io/heemod/articles/g_heterogeneity.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Heterogeneity & Demographic Analysis","text":"Heterogeneity analysis way explore results model can vary depending characteristics individuals population, demographic analysis estimates average values model entire population. practice two analyses naturally complement : heterogeneity analysis runs model multiple sets parameters (reflecting different characteristics found target population), demographic analysis combines results. example use result assessment new total hip replacement previously described vignette(\"d-non-homogeneous\", \"heemod\").","code":""},{"path":"https://aphp.github.io/heemod/articles/g_heterogeneity.html","id":"population-characteristics","dir":"Articles","previous_headings":"","what":"Population characteristics","title":"Heterogeneity & Demographic Analysis","text":"characteristics population input table, one column per parameter one row per individual. may example characteristics indiviuals included original trial data. example use characteristics 100 individuals, varying sex age, specified data frame tab_indiv:","code":"tab_indiv ## # A tibble: 100 × 2 ##      age   sex ##    <dbl> <int> ##  1    56     1 ##  2    61     0 ##  3    47     1 ##  4    52     0 ##  5    42     0 ##  6    71     1 ##  7    61     1 ##  8    70     1 ##  9    60     1 ## 10    50     1 ## # ℹ 90 more rows library(ggplot2) ggplot(tab_indiv, aes(x = age)) +   geom_histogram(binwidth = 2)"},{"path":"https://aphp.github.io/heemod/articles/g_heterogeneity.html","id":"running-the-analysis","dir":"Articles","previous_headings":"","what":"Running the analysis","title":"Heterogeneity & Demographic Analysis","text":"res_mod, result obtained run_model() Time-varying Markov models vignette, can passed update() update model new data perform heterogeneity analysis.","code":"res_h <- update(res_mod, newdata = tab_indiv) ## No weights specified in update, using equal weights. ## Updating strategy 'standard'... ## Updating strategy 'np1'..."},{"path":"https://aphp.github.io/heemod/articles/g_heterogeneity.html","id":"interpreting-results","dir":"Articles","previous_headings":"","what":"Interpreting results","title":"Heterogeneity & Demographic Analysis","text":"summary() method reports summary statistics cost, effect ICER, well result combined model. variation cost effect can plotted.      results combined model can plotted similarly results run_model().","code":"summary(res_h) ## An analysis re-run on 100 parameter sets. ##  ## * Unweighted analysis. ##  ## * Values distribution: ##  ##                                  Min.      1st Qu.      Median        Mean ## standard - Cost          543.46225608  605.0062810 626.3537753 683.4291651 ## standard - Effect         10.06345874   23.3226486  27.7806580  25.8050372 ## standard - Cost Diff.               -            -           -           - ## standard - Effect Diff.             -            -           -           - ## standard - Icer                     -            -           -           - ## np1 - Cost               618.86571941  635.5509751 641.3547975 657.9045025 ## np1 - Effect              10.13073146   23.4706053  27.9754765  26.0569701 ## np1 - Cost Diff.        -165.40882382  -99.5031416  15.0010223 -25.5246626 ## np1 - Effect Diff.         0.06727271    0.1756522   0.2162479   0.2519328 ## np1 - Icer              -354.56585682 -304.0330575  65.6679900   7.0276560 ##                             3rd Qu.        Max. ## standard - Cost         786.6690449 878.7813785 ## standard - Effect        29.0596426  31.5292548 ## standard - Cost Diff.             -           - ## standard - Effect Diff.           -           - ## standard - Icer                   -           - ## np1 - Cost              687.1659033 713.3725547 ## np1 - Effect             29.2683350  31.7651919 ## np1 - Cost Diff.         30.5446941  75.4034633 ## np1 - Effect Diff.        0.3272774   0.4665109 ## np1 - Icer              156.7853582 956.9156706 ##  ## * Combined result: ##  ## 2 strategies run for 60 cycles. ##  ## Initial state counts: ##  ## PrimaryTHR = 1000L ## SuccessP = 0L ## RevisionTHR = 0L ## SuccessR = 0L ## Death = 0L ##  ## Counting method: 'beginning'. ##  ## Values: ##  ##           utility     cost ## standard 25805.04 683429.2 ## np1      26056.97 657904.5 ##  ## Efficiency frontier: ##  ## np1 ##  ## Differences: ##  ##     Cost Diff. Effect Diff.      ICER     Ref. ## np1  -25.52466    0.2519328 -101.3153 standard plot(res_h, result = \"effect\", binwidth = 5) plot(res_h, result = \"cost\", binwidth = 50) plot(res_h, result = \"icer\", type = \"difference\",      binwidth = 500) plot(res_h, result = \"effect\", type = \"difference\",      binwidth = .1) plot(res_h, result = \"cost\", type = \"difference\",      binwidth = 30) plot(res_h, type = \"counts\")"},{"path":"https://aphp.github.io/heemod/articles/g_heterogeneity.html","id":"weighted-results","dir":"Articles","previous_headings":"","what":"Weighted results","title":"Heterogeneity & Demographic Analysis","text":"Weights can used analysis including optional column .weights new data specify respective weights strata target population.","code":"tab_indiv_w ## # A tibble: 100 × 3 ##      age   sex .weights ##    <dbl> <int>    <dbl> ##  1    45     0   0.0590 ##  2    59     1   0.228  ##  3    61     1   0.850  ##  4    46     0   0.844  ##  5    67     0   0.952  ##  6    66     1   0.480  ##  7    53     0   0.245  ##  8    76     1   0.659  ##  9    66     0   0.0165 ## 10    55     1   0.165  ## # ℹ 90 more rows res_w <- update(res_mod, newdata = tab_indiv_w) ## Updating strategy 'standard'... ## Updating strategy 'np1'... res_w ## An analysis re-run on 100 parameter sets. ##  ## * Weights distribution: ##  ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ## 0.00389 0.22690 0.45408 0.46025 0.67205 0.99822  ##  ## Total weight: 46.02452 ##  ## * Values distribution: ##  ##                                  Min.      1st Qu.     Median        Mean ## standard - Cost          438.70535048  613.9316623 629.415647 691.1999825 ## standard - Effect          6.12465030   24.4991251  27.780658  26.0184616 ## standard - Cost Diff.               -            -          -           - ## standard - Effect Diff.             -            -          -           - ## standard - Icer                     -            -          -           - ## np1 - Cost               590.76054210  637.9767000 642.187795 660.1213847 ## np1 - Effect               6.13624942   24.8264025  27.975477  26.2797727 ## np1 - Cost Diff.        -165.40882382 -122.7948420  12.772148 -31.0785979 ## np1 - Effect Diff.         0.01159912    0.1959412   0.220806   0.2613111 ## np1 - Icer              -354.56585682 -327.6476693  54.727146 212.7581144 ##                             3rd Qu.         Max. ## standard - Cost         819.1977737 8.787814e+02 ## standard - Effect        29.1382106 3.152925e+01 ## standard - Cost Diff.             -            - ## standard - Effect Diff.           -            - ## standard - Icer                   -            - ## np1 - Cost              696.4029317 7.133726e+02 ## np1 - Effect             29.3758145 3.176519e+01 ## np1 - Cost Diff.         24.0450377 1.520552e+02 ## np1 - Effect Diff.        0.3747771 4.665109e-01 ## np1 - Icer              115.2176112 1.310920e+04 ##  ## * Combined result: ##  ## 2 strategies run for 60 cycles. ##  ## Initial state counts: ##  ## PrimaryTHR = 1000L ## SuccessP = 0L ## RevisionTHR = 0L ## SuccessR = 0L ## Death = 0L ##  ## Counting method: 'beginning'. ##  ## Values: ##  ##           utility     cost ## standard 26018.46 691200.0 ## np1      26279.77 660121.4 ##  ## Efficiency frontier: ##  ## np1 ##  ## Differences: ##  ##     Cost Diff. Effect Diff.      ICER     Ref. ## np1   -31.0786    0.2613111 -118.9333 standard"},{"path":"https://aphp.github.io/heemod/articles/g_heterogeneity.html","id":"parallel-computing","dir":"Articles","previous_headings":"","what":"Parallel computing","title":"Heterogeneity & Demographic Analysis","text":"Updating can significantly sped using parallel computing. can done following way: Define cluster use_cluster() functions (.e. use_cluster(4) use 4 cores). Run analysis usual. stop using parallel computing use close_cluster() function. Results may vary depending machine, found speed gains quite limited beyond 4 cores.","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Tabular Input","text":"inputs state definition, transition matrices, model options, etc. (referenced tabular inputs) must provided via csv, xls xlsx files.1 Columns starting .comment ignored, well blank rows. inputs must provided separate files. path files specified reference file, acts ‘umbrella’ file atop inputs. reference file default name REFERENCE.csv. Warning users xls format: xls files read readxl package. version 0.1.1 column contains strings numeric values numeric values rounded 6 decimal places. therefore recommend use solely csv xlsx format.","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"reference-file","dir":"Articles","previous_headings":"","what":"Reference file","title":"Tabular Input","text":"file contains two mandatory columns data file, well optional columns comments, ignored. data column must contain following keywords: state: file containing model states. tm: file containing transition probabilities. parameters: file containing model parameters. Optionally, following rows can provided: options: file specifying model options. demographics: file describing population run models . data: directory containing additional tables loaded; can .csv, .xls .xlsx. output: directory save output graphics. source: directory R source files used analysis can placed, sourced model run. global environment modified. files directories must reference file directory. Files directories located elsewhere must given absolute path marked TRUE value optional absolute_path column.","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"states-file","dir":"Articles","previous_headings":"","what":"States file","title":"Tabular Input","text":"state file contains 2 mandatory columns: .model .state, corresponding strategy state names respectively. columns correspond state values. Discounting rates can specified .discount.* columns, * stands name value discount. Values always discounted rate states.2 Values specified one strategy carried others. values differ one strategy another must specified separately strategy. State values change models need specified (states except PrimaryTHR new model) automatically repeated models.","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"transition-probabilities","dir":"Articles","previous_headings":"","what":"Transition probabilities","title":"Tabular Input","text":"transition probabilities file contains 4 columns: .model: strategy name. : initial state. : end state. prob: transition probability initial state end state. probability can defined expression: number, C, different parameter name (specified parameter file), function call. state file probabilities specified one strategy carried others. probabilities differ one strategy another must specified separately strategy. Unspecified transition probabilities assumed 0.","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"parameters","dir":"Articles","previous_headings":"","what":"Parameters","title":"Tabular Input","text":"parameter file contains 2 mandatory columns: parameter names parameter values value. Optional columns can added perform deterministic probabilistic sensitivity analysis (DSA PSA). low high columns specify lower upper bounds parameter values DSA, psa contains parameter distribution PSA. parameter can specified expression: number, previously defined parameter, mathematical formula function call. look_up() function can used look parameter values external reference tables (see section User-defined data), data argument given reference file (mr parameter example).","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"user-defined-data","dir":"Articles","previous_headings":"","what":"User-defined data","title":"Tabular Input","text":"Sometimes external data required analysis (e.g. age-specific mortality rates). data row reference file specifies subdirectory containing data frames loaded (saved csv, xls, xlsx files). Multiple files can placed , filename (without extension) used dataframe name.3","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"model-options","dir":"Articles","previous_headings":"","what":"Model options","title":"Tabular Input","text":"Models specified tabular input run defaults options. following options can specified non-mandatory options file: cost, effect: values used cost effect. init comma separated starting values. method: counting method. base: name base model. cycles: run model many cycles? n: number resample PSA. num_core: number cluster cores.","code":""},{"path":"https://aphp.github.io/heemod/articles/h_tabular.html","id":"run-the-analysis","dir":"Articles","previous_headings":"","what":"Run the analysis","title":"Tabular Input","text":"entire set analysis specified tabular files can run function run_model_from_tabular(). results can interpreted usual.","code":"result <- run_model_tabular(   location = system.file(\"tabular/thr\", package = \"heemod\") ) ## Running DSA on strategy 'standard'... ## Running DSA on strategy 'new'... ## Resampling strategy 'standard'... ## Resampling strategy 'standard'... ## Resampling strategy 'new'... ## Resampling strategy 'new'... ## Updating strategy 'standard'... ## Updating strategy 'new'... result$model_runs ## 2 strategies run for 50 cycles. ##  ## Initial state counts: ##  ## PrimaryTHR = 1000 ## SuccessfulPrimary = 0 ## RevisionTHR = 0 ## SuccessfulRevision = 0 ## Death = 0 ##  ## Counting method: 'beginning'. ##  ## Values: ##  ##               cost     qaly ## standard 304266.73 14641.51 ## new       80960.18 14685.77 ##  ## Efficiency frontier: ##  ## new ##  ## Differences: ##  ##     Cost Diff. Effect Diff.      ICER     Ref. ## new  -223.3065   0.04426563 -5044.693 standard plot(result$psa,      type = \"ce\") plot(result$dsa,      result = \"cost\",      strategy = \"new\") result$demographics ## An analysis re-run on 8 parameter sets. ##  ## * Weights distribution: ##  ##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  ## 0.00219 0.01194 0.01482 0.01489 0.01994 0.02264  ##  ## Total weight: 0.1191407 ##  ## * Values distribution: ##  ##                                  Min.       1st Qu.        Median          Mean ## standard - Cost          3.892620e+01  4.392518e+01   993.2017848   708.5801137 ## standard - Effect        4.098947e+00  4.403150e+00    13.1467098    10.0487221 ## standard - Cost Diff.               -             -             -             - ## standard - Effect Diff.             -             -             -             - ## standard - Icer                     -             -             -             - ## new - Cost               1.022389e+01  1.154223e+01   279.3495600   200.4971884 ## new - Effect             4.103704e+00  4.408382e+00    13.2912790    10.1504406 ## new - Cost Diff.        -9.174158e+02 -8.167007e+02  -713.8522248  -508.0829253 ## new - Effect Diff.       4.587073e-03  5.172165e-03     0.1418194     0.1017185 ## new - Icer              -6.263848e+03 -6.256979e+03 -5032.9834879 -5471.8546606 ##                               3rd Qu.          Max. ## standard - Cost          1139.7822107  1284.1587856 ## standard - Effect          13.8274561    14.4422790 ## standard - Cost Diff.               -             - ## standard - Effect Diff.             -             - ## standard - Icer                     -             - ## new - Cost                323.0815351   366.7429773 ## new - Effect               13.9929427    14.6290526 ## new - Cost Diff.          -32.3829481   -28.7023186 ## new - Effect Diff.          0.1643751     0.1867736 ## new - Icer              -4968.9381888 -4911.9130861 ##  ## * Combined result: ##  ## 2 strategies run for 50 cycles. ##  ## Initial state counts: ##  ## PrimaryTHR = 1000 ## SuccessfulPrimary = 0 ## RevisionTHR = 0 ## SuccessfulRevision = 0 ## Death = 0 ##  ## Counting method: 'beginning'. ##  ## Values: ##  ##              cost     qaly ## standard 708580.1 10048.72 ## new      200497.2 10150.44 ##  ## Efficiency frontier: ##  ## new ##  ## Differences: ##  ##     Cost Diff. Effect Diff.      ICER     Ref. ## new  -508.0829    0.1017185 -4994.989 standard"},{"path":"https://aphp.github.io/heemod/articles/i_reproduction.html","id":"hiv-model","dir":"Articles","previous_headings":"","what":"HIV model","title":"Reproducing Exact Results from DMHEE","text":"Key differences DMHEE: transitions occur end year, cost counted starting year 1, year 0, treatment stops 2 years, rounding errors. possible reproduce 1. 2. making transition happen end year method = “end”. Since method transition occur 1 year beginning, costs discounted first cycle argument first = TRUE discount(). Point 3. reproduced making rr cost_lami time changing variable like rr = ifelse(model_time <= 2, .509, 1.00). last point reproduced writing transition probabilities fractions.","code":"par_mod <- define_parameters(   rr = ifelse(model_time <= 2, .509, 1),   cost_lami = ifelse(model_time <= 2, 2086.5, 0),   cost_zido = 2278 )  mat_mono <- define_transition(   1251/1734, 350/1734, 116/1734,  17/1734,   0,         731/1258, 512/1258,  15/1258,   0,         0,        1312/1749, 437/1749,   0,         0,        0,         1.00 ) ## No named state -> generating names. mat_comb <- define_transition(   C, 350/1734*rr, 116/1734*rr, 17/1734*rr,   0, C,           512/1258*rr, 15/1258*rr,   0, 0,           C,           437/1749*rr,   0, 0,           0,           1.00 ) ## No named state -> generating names. A_mono <- define_state(   cost_health = 2756,   cost_drugs = cost_zido,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 1 ) B_mono <- define_state(   cost_health = 3052,   cost_drugs = cost_zido,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 1 ) C_mono <- define_state(   cost_health = 9007,   cost_drugs = cost_zido,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 1 ) D_mono <- define_state(   cost_health = 0,   cost_drugs = 0,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 0 )  A_comb <- define_state(   cost_health = 2756,   cost_drugs = cost_zido + cost_lami,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 1 ) B_comb <- define_state(   cost_health = 3052,   cost_drugs = cost_zido + cost_lami,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 1 ) C_comb <- define_state(   cost_health = 9007,   cost_drugs = cost_zido + cost_lami,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 1 ) D_comb <- define_state(   cost_health = 0,   cost_drugs = 0,   cost_total = discount(     cost_health + cost_drugs, .06, first = T),   life_year = 0 )  mod_mono <- define_strategy(   transition = mat_mono,   A_mono,   B_mono,   C_mono,   D_mono ) ## No named state -> generating names. mod_comb <- define_strategy(   transition = mat_comb,   A_comb,   B_comb,   C_comb,   D_comb ) ## No named state -> generating names. res_mod <- run_model(   mono = mod_mono,   comb = mod_comb,   parameters = par_mod,   cycles = 20,   cost = cost_total,   effect = life_year,   method = \"end\",   init = c(1, 0, 0, 0) ) summary(res_mod) ## 2 strategies run for 20 cycles. ##  ## Initial state counts: ##  ## A = 1 ## B = 0 ## C = 0 ## D = 0 ##  ## Counting method: 'end'. ##  ## Values: ##  ##      cost_health cost_drugs cost_total life_year ## mono    45541.24   18203.97   44663.45  7.991207 ## comb    48082.83   24492.28   50601.65  8.937389 ##  ## Efficiency frontier: ##  ## mono -> comb ##  ## Differences: ##  ##      Cost Diff. Effect Diff.     ICER Ref. ## comb   5938.198    0.9461822 6275.956 mono"},{"path":"https://aphp.github.io/heemod/articles/i_reproduction.html","id":"thr-model","dir":"Articles","previous_headings":"","what":"THR model","title":"Reproducing Exact Results from DMHEE","text":"Key difference DMHEE: Mortality rates much higher book. can corrected using user-specified mortality table fetch values :","code":"look_up(death_prob, age = age, sex = sex, bin = \"age\") # a function to return age-related mortality rate # given age and sex death_prob <- data.frame(   age = rep(seq(35, 85, 10), each = 2),   sex = rep(1:0, 6),   value = c(     1.51e-3, .99e-3, 3.93e-3,     2.6e-3, 10.9e-3, 6.7e-3,     31.6e-3, 19.3e-3, 80.1e-3,     53.5e-3, 187.9e-3, 154.8e-3   ) ) death_prob ##    age sex   value ## 1   35   1 0.00151 ## 2   35   0 0.00099 ## 3   45   1 0.00393 ## 4   45   0 0.00260 ## 5   55   1 0.01090 ## 6   55   0 0.00670 ## 7   65   1 0.03160 ## 8   65   0 0.01930 ## 9   75   1 0.08010 ## 10  75   0 0.05350 ## 11  85   1 0.18790 ## 12  85   0 0.15480 param <- define_parameters(     age_init = 60,     sex = 0,     # age increases with cycles     age = age_init + model_time,          # operative mortality rates     omrPTHR = .02,     omrRTHR = .02,          # re-revision mortality rate     rrr = .04,          # parameters for calculating primary revision rate     cons = -5.490935,     ageC = -.0367022,     maleC = .768536,     lambda = exp(cons + ageC * age_init + maleC * sex),     lngamma = 0.3740968,     gamma = exp(lngamma),     lnrrNP1 = -1.344474,     rrNP1 = exp(lnrrNP1),         # revision probability of primary procedure     standardRR = 1 - exp(lambda * ((model_time - 1) ^ gamma -                                      model_time ^ gamma)),     np1RR = 1 - exp(lambda * rrNP1 * ((model_time - 1) ^ gamma -                                          model_time ^ gamma)),          # age-related mortality rate     sex_cat = ifelse(sex == 0, \"FMLE\", \"MLE\"),     mr = look_up(death_prob, age = age, sex = sex, bin = \"age\"),          u_successP = .85,     u_revisionTHR = .30,     u_successR = .75,     c_revisionTHR = 5294 )  mat_standard <- define_transition(     state_names = c(       \"PrimaryTHR\",       \"SuccessP\",       \"RevisionTHR\",       \"SuccessR\",       \"Death\"     ),     0, C, 0,          0, omrPTHR,     0, C, standardRR, 0, mr,     0, 0, 0,          C, omrRTHR+mr,     0, 0, rrr,        C, mr,     0, 0, 0,          0, 1 )  mat_np1 <- define_transition(     state_names = c(       \"PrimaryTHR\",       \"SuccessP\",       \"RevisionTHR\",       \"SuccessR\",       \"Death\"     ),     0, C, 0,     0, omrPTHR,     0, C, np1RR, 0, mr,     0, 0, 0,     C, omrRTHR+mr,     0, 0, rrr,   C, mr,     0, 0, 0,     0, 1 )  mod_standard <- define_strategy(   transition = mat_standard,   PrimaryTHR = define_state(     utility = 0,     cost = 394   ),   SuccessP = define_state(     utility = discount(u_successP, .015),     cost = 0   ),   RevisionTHR = define_state(     utility = discount(u_revisionTHR, .015),     cost = discount(c_revisionTHR, .06)   ),   SuccessR = define_state(     utility = discount(u_successR, .015),     cost = 0   ),   Death = define_state(     utility = 0,     cost = 0   ) )  mod_np1 <- define_strategy(   transition = mat_np1,   PrimaryTHR = define_state(     utility = 0,     cost = 579   ),   SuccessP = define_state(     utility = discount(u_successP, .015),     cost = 0   ),   RevisionTHR = define_state(     utility = discount(u_revisionTHR, .015),     cost = discount(c_revisionTHR, .06)   ),   SuccessR = define_state(     utility = discount(u_successR, .015),     cost = 0   ),   Death = define_state(     utility = 0,     cost = 0   ) )  res_mod <- run_model(   standard = mod_standard,   np1 = mod_np1,   parameters = param,   cycles = 60,   cost = cost,   effect = utility,   method = \"beginning\",   init = c(1, 0, 0, 0, 0) ) summary(res_mod) ## 2 strategies run for 60 cycles. ##  ## Initial state counts: ##  ## PrimaryTHR = 1 ## SuccessP = 0 ## RevisionTHR = 0 ## SuccessR = 0 ## Death = 0 ##  ## Counting method: 'beginning'. ##  ## Values: ##  ##           utility     cost ## standard 14.65283 512.4327 ## np1      14.69734 610.3112 ##  ## Efficiency frontier: ##  ## standard -> np1 ##  ## Differences: ##  ##     Cost Diff. Effect Diff.     ICER     Ref. ## np1   97.87858   0.04451095 2198.977 standard"},{"path":"https://aphp.github.io/heemod/articles/j_survival.html","id":"distributions","dir":"Articles","previous_headings":"","what":"Distributions","title":"Survival models","text":"heemod package provides number ways estimate transition probabilities survival distributions. Survival distributions can come least three different sources: User-defined parametric distributions define_surv_dist() define_surv_spline(). Fitted survival models Kaplan-Meier estimator parametric distributions define_surv_fit() Survival Tables define_surv_table() defined, types distributions can combined modified using standard set operations. User-defined parametric distributions created using define_surv_dist() define_surv_spline() functions: Fitted Kaplan-Meier curves created using survival::survfit() wrapped define_surv_fit()   Fitted models can include covariates. order use model covariates heemod, can use set_covariates() function fitted model provide additional arguments covariate values want model. can also provide data frame covariate levels aggregate survival probabilities different groups. default, heemod aggregate predicted survival probabilities subject dataset model fit.  Similar functionality also available fitted parametric models created using flexsurv::flexsurvreg() flexsurv::flexsurvspline() wrapped define_surv_fit()","code":"surv_dist_1 <- define_surv_dist(   distribution = \"exp\",   rate = .5 )  surv_dist_2 <- define_surv_spline(   scale = \"odds\",   gamma = c(-11.643, 1.843, 0.208),   knots = c(4.077537, 5.883183, 6.458338) ) ## Loading required namespace: flexsurv library(flexsurv) ## Loading required package: survival fit_w <- flexsurvreg(   formula = Surv(futime, fustat) ~ 1,   data = ovarian, dist = \"weibull\" ) |>    define_surv_fit()  plot(fit_w) fit_spl <- flexsurvspline(   formula = Surv(futime, fustat) ~ 1,   data = ovarian,   scale = \"odds\",   k=1 ) |>    define_surv_fit()  plot(fit_spl) fit_cov <- flexsurvreg(   formula = Surv(rectime, censrec) ~ group,   dist = \"weibull\",   data = bc )|>    define_surv_fit() plot(fit_cov) ## No covariates provided, returning aggregate survival across all subjects. fitcov_good   <- set_covariates(fit_cov, group = \"Good\") fitcov_medium <- set_covariates(fit_cov, group = \"Medium\") fitcov_poor   <- set_covariates(fit_cov, group = \"Poor\") library(survival)  km_1 <- survfit(   formula = Surv(futime, fustat) ~ 1,   data = ovarian ) |>        define_surv_fit() km_cov <- survfit(   formula = Surv(rectime, censrec) ~ group,   data = bc ) |>        define_surv_fit() plot(km_cov) ## No covariates provided, returning aggregate survival across all subjects. km_good   <- set_covariates(km_cov, group = \"Good\") km_medium <- set_covariates(km_cov, group = \"Medium\") km_poor   <- set_covariates(km_cov, group = \"Poor\")"},{"path":"https://aphp.github.io/heemod/articles/j_survival.html","id":"operations","dir":"Articles","previous_headings":"","what":"Operations","title":"Survival models","text":"defined, treatment effects various types can applied survival distribution: Hazard ratio: apply_hr(). Odds ratio: apply_or(). Acceleration factor: apply_af(). addition, distributions can combined using variety operations: Join survival distributions together: join(). Mix two () survival distributions: mix(). Combine two () survival distributions independent risks: add_hazards(). transition survival probabilities computed compute_surv(). Time (usually model_time state_time) needs passed function time argument. operations can chained |> pipe operator.","code":"km_poor_ph <- apply_hr(km_poor, hr = 0.5) km_medium_af <- apply_af(km_medium, af = 1.2) km_poor_join <- join(   km_poor,   fitcov_poor,   at = 365 ) models_all <- mix(   fitcov_good, fitcov_medium, fitcov_poor,   weights = c(0.25, 0.25, 0.5) ) combined_risks <- add_hazards(   fit_w, fitcov_good ) compute_surv(surv_dist_2, time = 1:5) ## [1] 8.780223e-06 2.271877e-05 3.500128e-05 4.649850e-05 5.747782e-05 fit_cov |>    set_covariates(group = \"Good\") |>    apply_hr(hr = 2) |>    join(     fitcov_poor,     at = 3   ) |>   mix(     fitcov_medium,     weights = c(0.25, 0.75)   ) |>   add_hazards(     fit_w   ) |>    compute_surv(time = 1:5) ## [1] 0.0004011356 0.0004736851 0.0005069766 0.0005490092 0.0005692261"},{"path":[]},{"path":"https://aphp.github.io/heemod/articles/j_survival.html","id":"transition-matrix","dir":"Articles","previous_headings":"Applications","what":"Transition matrix","title":"Survival models","text":"example define simple model 1 strategy.","code":"param <- define_parameters(   p1 = compute_surv(     surv_dist_1,     time = model_time # can also be state_time   ),   p2 = km_1 |>     join(fit_w, at = 730) |>     compute_surv(       time = model_time,       cycle_length = 365  # time is in days in km_medium, in years in model_time     ) )  tm <- define_transition(   C, p1 - p2, p2,   0, C,       p2,   0, 0,       C ) ## No named state -> generating names. plot(tm) ## Loading required namespace: diagram sA <-  define_state(   cost = 10, ut = 1 ) sB <-  define_state(   cost = 20, ut = .5 ) sC <-  define_state(   cost = 0, ut = 0 )  stratTM <- define_strategy(   transition = tm,   A = sA, B = sB, C = sC )  resTM <- run_model(   parameters = param,   stratTM,   cycles = 15,   cost = cost, effect = ut ) ## No named model -> generating names. ## No covariates provided, returning aggregate survival across all subjects. ## No covariates provided, returning aggregate survival across all subjects. plot(resTM)"},{"path":"https://aphp.github.io/heemod/articles/j_survival.html","id":"partitioned-survival-model","dir":"Articles","previous_headings":"Applications","what":"Partitioned survival model","title":"Survival models","text":"partitioned survival model can also computed:","code":"ps <- define_part_surv(   pfs = surv_dist_1,   os  = km_1 |>     join(fit_w, at = 730),   cycle_length = c(1, 365) # 1 for pfs, 365 for os ) ## No named state -> generating names. stratPS <- define_strategy(   transition = ps,   A = sA, B = sB, C = sC )  resPS <- run_model(   stratPS,   cycles = 15,   cost = cost, effect = ut ) ## No named model -> generating names. ## No covariates provided, returning aggregate survival across all subjects. ## No covariates provided, returning aggregate survival across all subjects. plot(resPS)"},{"path":"https://aphp.github.io/heemod/articles/j_survival_2_psa.html","id":"from-a-user-defined-parametric-distribution","dir":"Articles","previous_headings":"","what":"From a user-defined parametric distribution","title":"Survival Models Part 2 - PSA","text":"resample_surv() function uses random generator parameters initially defined distribution. need specify n argument define number draws, can control variability way (higher n , lower variability). hood, empirical cumulative function created random draws nonlinear model determining Least Squares estimates new parameters fitted. can display distribution confidence interval using plot() function. useful check expected variability model.","code":"surv_dist <- define_surv_dist(\"gamma\", shape = 2, rate = 0.1) psa <- define_psa(surv_dist ~ resample_surv(n = 500)) psa2 <- define_psa(surv_dist ~ resample_surv(n = 50)) plot(surv_dist, psa = psa) plot(surv_dist, psa = psa2)"},{"path":"https://aphp.github.io/heemod/articles/j_survival_2_psa.html","id":"from-real-data","dir":"Articles","previous_headings":"","what":"From real data","title":"Survival Models Part 2 - PSA","text":"non-parametric bootstrap (random sampling) data.frame performed. iteration PSA, new data.frame created model runs new data. perform PSA real data, resample_surv() must contain arguments.  possible carry PSA objects class surv_object, including complex objects, created using sequence operations. Taking previous vignette example:","code":"fit_cov <- flexsurv::flexsurvreg(survival::Surv(rectime, censrec) ~ group,                             data = bc,                             dist = \"exp\")|>   define_surv_fit()  psa <-  define_psa(fit_cov ~ resample_surv())  plot(fit_cov, times = 1:1000, psa = psa, Nrep = 10) ## No covariates provided, returning aggregate survival across all subjects. fitcov_poor   <- set_covariates(fit_cov, group = \"Poor\") fitcov_medium <- set_covariates(fit_cov, group = \"Medium\") fit_w <- flexsurvreg(   formula = Surv(futime, fustat) ~ 1,   data = ovarian, dist = \"weibull\" ) |>    define_surv_fit()  fit_cov |>    set_covariates(group = \"Good\") |>    apply_hr(hr = 2) |>    mix(     fitcov_medium,     weights = c(0.25, 0.75)   ) |>   add_hazards(     fit_w   ) |>   join(     fitcov_poor,     at = 500   ) |> plot(psa = psa, 1:1000, Nrep = 10)"},{"path":"https://aphp.github.io/heemod/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Zarca. Author, maintainer. Antoine Filipovic-Pierucci. Author. Matthew Wiener. Contributor. Zdenek Kabat. Contributor. Vojtech Filipec. Contributor. Jordan Amdahl. Contributor. Yonatan Carranza Alarcon. Contributor. Vince Daniels. Contributor.","code":""},{"path":"https://aphp.github.io/heemod/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Filipović-Pierucci , Zarca K, Durand-Zaleski (2017). “Markov Models Health Economic Evaluation: R Package heemod.” ArXiv e-prints. R package version 1.0.1.9000, 1702.03252.","code":"@Article{,   author = {Antoine Filipovi\\'c-Pierucci and Kevin Zarca and Isabelle Durand-Zaleski},   title = {Markov Models for Health Economic Evaluation: The R Package heemod},   journal = {ArXiv e-prints},   archiveprefix = {arXiv},   primaryclass = {stat.AP},   year = {2017},   eprint = {1702.03252},   note = {R package version 1.0.1.9000},   month = {feb},   adsurl = {https://adsabs.harvard.edu/abs/2017arXiv170203252F},   adsnote = {Provided by the SAO/NASA Astrophysics Data System}, }"},{"path":"https://aphp.github.io/heemod/index.html","id":"heemod---health-economic-evaluation-modelling","dir":"","previous_headings":"","what":"Markov Models for Health Economic Evaluations","title":"Markov Models for Health Economic Evaluations","text":"Markov Models Health Economic Evaluations. implementation modelling reporting features described reference textbooks guidelines: deterministic probabilistic sensitivity analysis, heterogeneity analysis, time dependency state-time model-time (semi-Markov non-homogeneous Markov models), etc. can install: latest released version CRAN : latest development version github : heemod can cited : Filipović-Pierucci , Zarca K Durand-Zaleski (2017). “Markov Models Health Economic Evaluation: R Package heemod.” ArXiv e-prints. R package version 0.8.0, 1702.03252","code":"install.packages(\"heemod\") devtools::install_github(\"aphp/heemod\")"},{"path":"https://aphp.github.io/heemod/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Markov Models for Health Economic Evaluations","text":"Main features: * Accounting time-dependency: * model time state time. * Time-varying transition probabilities. * Time-varying values attached states. * Probabilistic uncertainty analysis (PSA). * correlated resampling. * Covariance analysis PSA. * Expected value perfect information (EVPI). * Deterministic sensitivity analysis (DSA). features: Multiple state membership correction methods (life-table, custom method, etc.). Demographic analysis compute population-level results. Heterogeneity analysis. Parallel computing support. Features budget impact analysis. Interface SAVI BCEA. analyses presented Decision Modelling Health Economic Evaluation can performed heemod. See Reproducing Exact Results DMHEE vignette exact reproduction analyses book.","code":""},{"path":"https://aphp.github.io/heemod/index.html","id":"learning-heemod","dir":"","previous_headings":"","what":"Learning heemod","title":"Markov Models for Health Economic Evaluations","text":"get started read Introduction heemod vignette. Specific analysis examples (mostly inspired Decision Modelling Health Economic Evaluation) can found package vignettes.","code":""},{"path":"https://aphp.github.io/heemod/index.html","id":"devs","dir":"","previous_headings":"","what":"Devs","title":"Markov Models for Health Economic Evaluations","text":"Kevin Zarca Antoine Filipović-Pierucci.","code":""},{"path":"https://aphp.github.io/heemod/index.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Markov Models for Health Economic Evaluations","text":"Matthew Wiener Zdenek Kabat Vojtech Filipec Jordan Amdahl Yonatan Carranza Alarcon Vince Daniels","code":""},{"path":"https://aphp.github.io/heemod/reference/acceptability_curve.html","id":null,"dir":"Reference","previous_headings":"","what":"Acceptability Curve from Probabilistic Analysis — acceptability_curve","title":"Acceptability Curve from Probabilistic Analysis — acceptability_curve","text":"Acceptability Curve Probabilistic Analysis","code":""},{"path":"https://aphp.github.io/heemod/reference/acceptability_curve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Acceptability Curve from Probabilistic Analysis — acceptability_curve","text":"","code":"acceptability_curve(x, wtp_thresholds)"},{"path":"https://aphp.github.io/heemod/reference/acceptability_curve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Acceptability Curve from Probabilistic Analysis — acceptability_curve","text":"x Result run_psa(). wtp_thresholds willingness pay thresholds","code":""},{"path":"https://aphp.github.io/heemod/reference/acceptability_curve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Acceptability Curve from Probabilistic Analysis — acceptability_curve","text":"data frame columns .ceac (cost-effectiveness acceptability threshold), .model (treatments models), .n (number cases treatment cost-effective), .p (proportion cases treatment effective).","code":""},{"path":"https://aphp.github.io/heemod/reference/add_hazards.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Hazards — add_hazards","title":"Add Hazards — add_hazards","text":"Get survival distribution reflecting independent hazards two survival distributions.","code":""},{"path":"https://aphp.github.io/heemod/reference/add_hazards.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Hazards — add_hazards","text":"","code":"add_hazards(...)  add_hazards_(dots)"},{"path":"https://aphp.github.io/heemod/reference/add_hazards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Hazards — add_hazards","text":"... Survival distributions used projection. dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/add_hazards.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Hazards — add_hazards","text":"surv_add_haz object.","code":""},{"path":"https://aphp.github.io/heemod/reference/add_hazards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Hazards — add_hazards","text":"","code":"dist1 <- define_surv_dist(distribution = \"exp\", rate = .125) dist2 <- define_surv_dist(distribution = \"weibull\", shape = 1.2, scale = 50) combined_dist <- add_hazards(dist1, dist2)"},{"path":"https://aphp.github.io/heemod/reference/apply_af.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply an Acceleration Factor — apply_af","title":"Apply an Acceleration Factor — apply_af","text":"Proportionally increase reduce time event survival distribution.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_af.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply an Acceleration Factor — apply_af","text":"","code":"apply_af(dist, af, log_af = FALSE)"},{"path":"https://aphp.github.io/heemod/reference/apply_af.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply an Acceleration Factor — apply_af","text":"dist survival distribution. af acceleration factor applied. log_af TRUE, acceleration factor exponentiated applied.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_af.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply an Acceleration Factor — apply_af","text":"surv_aft object.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_af.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply an Acceleration Factor — apply_af","text":"","code":"dist1 <- define_surv_dist(distribution = \"exp\", rate = .25) aft_dist <- apply_af(dist1, 1.5)"},{"path":"https://aphp.github.io/heemod/reference/apply_hr.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Hazard Ratio — apply_hr","title":"Apply a Hazard Ratio — apply_hr","text":"Proportional reduce increase hazard rate distribution.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_hr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Hazard Ratio — apply_hr","text":"","code":"apply_hr(dist, hr, log_hr = FALSE)"},{"path":"https://aphp.github.io/heemod/reference/apply_hr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Hazard Ratio — apply_hr","text":"dist survival distribution. hr hazard ratio applied. log_hr TRUE, hazard ratio exponentiated applied.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_hr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Hazard Ratio — apply_hr","text":"surv_ph object.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_hr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a Hazard Ratio — apply_hr","text":"","code":"dist1 <- define_surv_dist(distribution = \"exp\", rate = .25) ph_dist <- apply_hr(dist1, 0.5)"},{"path":"https://aphp.github.io/heemod/reference/apply_or.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply an Odds Ratio — apply_or","title":"Apply an Odds Ratio — apply_or","text":"Proportionally increase reduce odds event survival distribution.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_or.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply an Odds Ratio — apply_or","text":"","code":"apply_or(dist, or, log_or = FALSE)"},{"path":"https://aphp.github.io/heemod/reference/apply_or.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply an Odds Ratio — apply_or","text":"dist survival distribution. odds ratio applied. log_or TRUE, odds ratio exponentiated applied.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_or.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply an Odds Ratio — apply_or","text":"surv_po object.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_or.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply an Odds Ratio — apply_or","text":"","code":"dist1 <- define_surv_dist(distribution = \"exp\", rate = .25) po_dist <- apply_or(dist1, 1.2)"},{"path":"https://aphp.github.io/heemod/reference/apply_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a time shift to a survival distribution — apply_shift","title":"Apply a time shift to a survival distribution — apply_shift","text":"Apply time shift survival distribution","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a time shift to a survival distribution — apply_shift","text":"","code":"apply_shift(dist, shift)"},{"path":"https://aphp.github.io/heemod/reference/apply_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a time shift to a survival distribution — apply_shift","text":"dist survival distribution. shift time shift applied.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a time shift to a survival distribution — apply_shift","text":"surv_shift object.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_shift.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a time shift to a survival distribution — apply_shift","text":"positive shift moves fit backwards time.   , shift 4 cause time 5 evaluated time 1, . shift == 0, dist returned unchanged.","code":""},{"path":"https://aphp.github.io/heemod/reference/apply_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a time shift to a survival distribution — apply_shift","text":"","code":"dist1 <- define_surv_dist(distribution = \"gamma\", rate = 0.25, shape = 3) shift_dist <- apply_shift(dist1, 4) compute_surv(dist1, 1:10) #> Loading required namespace: flexsurv #>  [1] 0.002161497 0.012252665 0.026499021 0.041475959 0.055704051 0.068650610 #>  [7] 0.080209420 0.090451640 0.099511595 0.107536400 compute_surv(shift_dist, 1:10) #>  [1] 0.000000000 0.000000000 0.000000000 0.000000000 0.002161497 0.012252665 #>  [7] 0.026499021 0.041475959 0.055704051 0.068650610"},{"path":"https://aphp.github.io/heemod/reference/as_expr_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Lazy Dots to Expression List — as_expr_list","title":"Convert Lazy Dots to Expression List — as_expr_list","text":"function used interpolate().","code":""},{"path":"https://aphp.github.io/heemod/reference/as_expr_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Lazy Dots to Expression List — as_expr_list","text":"","code":"as_expr_list(.dots)"},{"path":"https://aphp.github.io/heemod/reference/as_expr_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Lazy Dots to Expression List — as_expr_list","text":".dots quosures object.","code":""},{"path":"https://aphp.github.io/heemod/reference/as_expr_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Lazy Dots to Expression List — as_expr_list","text":"list expression.","code":""},{"path":"https://aphp.github.io/heemod/reference/calc_prob_from_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Probability of Event — calc_prob_from_surv","title":"Calculate Probability of Event — calc_prob_from_surv","text":"Calculates per-cycle event probabilities vector survival probabilities.","code":""},{"path":"https://aphp.github.io/heemod/reference/calc_prob_from_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Probability of Event — calc_prob_from_surv","text":"","code":"calc_prob_from_surv(x)"},{"path":"https://aphp.github.io/heemod/reference/calc_prob_from_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Probability of Event — calc_prob_from_surv","text":"x vector conditional event probabilities.","code":""},{"path":"https://aphp.github.io/heemod/reference/calc_prob_from_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Probability of Event — calc_prob_from_surv","text":"per-cycle event probabilities.","code":""},{"path":"https://aphp.github.io/heemod/reference/calc_surv_from_prob.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Probability of Survival — calc_surv_from_prob","title":"Calculate Probability of Survival — calc_surv_from_prob","text":"Calculates probability survival vector event probabilities","code":""},{"path":"https://aphp.github.io/heemod/reference/calc_surv_from_prob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Probability of Survival — calc_surv_from_prob","text":"","code":"calc_surv_from_prob(x)"},{"path":"https://aphp.github.io/heemod/reference/calc_surv_from_prob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Probability of Survival — calc_surv_from_prob","text":"x vector per-cycle event probabilities.","code":""},{"path":"https://aphp.github.io/heemod/reference/calc_surv_from_prob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Probability of Survival — calc_surv_from_prob","text":"survival probabilities.","code":""},{"path":"https://aphp.github.io/heemod/reference/calibrate_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Calibrate Model Parameters — calibrate_model","title":"Calibrate Model Parameters — calibrate_model","text":"Search appropriate value unknown parameters obtain specific model results.","code":""},{"path":"https://aphp.github.io/heemod/reference/calibrate_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calibrate Model Parameters — calibrate_model","text":"","code":"calibrate_model(   x,   parameter_names,   fn_values,   target_values,   initial_values = NULL,   method = c(\"Nelder-Mead\", \"BFGS\", \"L-BFGS-B\"),   ... )"},{"path":"https://aphp.github.io/heemod/reference/calibrate_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calibrate Model Parameters — calibrate_model","text":"x Result run_model() update(). parameter_names Names parameters calibrate. fn_values Function applied model returns values interest numeric vector. target_values Values match, length output fn_values. initial_values Optional starting values. See details. method Optimisation method (Nelder-Mead, BFGS, L-BFGS-B). ... Optional arguments passed optimx::optimx().","code":""},{"path":"https://aphp.github.io/heemod/reference/calibrate_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calibrate Model Parameters — calibrate_model","text":"data frame row calibrated values parameters given parameter_names, corresponding row initial_values, along convergence code run.","code":""},{"path":"https://aphp.github.io/heemod/reference/calibrate_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calibrate Model Parameters — calibrate_model","text":"Parameters optimized unchanged values model run. initial_values NULL, initial parameter values also taken model run. initial_values can vector table. second case row corresponds set initial parameter values: calibration run per set. Passing multiple initial values allows (among things) user check whether calibration gets results different starting points. Multi-dimensional problems optimized optimx::optimx(), 1-dimensional problems stats::optimise() (except method given). convcode always NA stats::optimise(). Running calibrate_model() change model parameters; user must create new model run desired. See also vignette(\"k-calibration\").","code":""},{"path":"https://aphp.github.io/heemod/reference/calibrate_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calibrate Model Parameters — calibrate_model","text":"","code":"param <- define_parameters(p = 0.8)  mat <- define_transition(   p, C,   0, 1 ) #> No named state -> generating names. mod <- define_strategy(   transition = mat,   A = define_state(cost=10, effect = 0.5),    B = define_state(cost = 5, effect = 0.8) )  res_mod <- run_model(   mod = mod,   parameters = param,   init = c(1000L, 0L),   cycles = 10,   cost = cost,   effect = effect,   method = \"end\" )  f <- function(x) {   dplyr::filter(     get_counts(x),     state_names == \"A\" & model_time == 10   )$count } f(res_mod) #> [1] 107.3742  #'\\dontrun{ #'calibrate_model( #'  res_mod, #'  parameter_names = \"p\", #'  fn_values = f, #'  target_values = 130, #'  initial_values = data.frame(p = c(0.5, 0.9)), #'  lower = 0, upper = 1 #') #'}"},{"path":"https://aphp.github.io/heemod/reference/check_cycle_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Cycle and Time Inputs — check_cycle_inputs","title":"Check Cycle and Time Inputs — check_cycle_inputs","text":"Performs checks cycle time inputs eval_surv().","code":""},{"path":"https://aphp.github.io/heemod/reference/check_cycle_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Cycle and Time Inputs — check_cycle_inputs","text":"","code":"check_cycle_inputs(cycle, cycle_length)"},{"path":"https://aphp.github.io/heemod/reference/check_cycle_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Cycle and Time Inputs — check_cycle_inputs","text":"cycle model_time state_time predict. cycle_length length Markov cycle absolute time units.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Markov Model Transition Matrix — check_matrix","title":"Check Markov Model Transition Matrix — check_matrix","text":"Check whether matrix fulfills conditions transition matrix.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Markov Model Transition Matrix — check_matrix","text":"","code":"check_matrix(x)"},{"path":"https://aphp.github.io/heemod/reference/check_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Markov Model Transition Matrix — check_matrix","text":"x matrix.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Markov Model Transition Matrix — check_matrix","text":"NULL","code":""},{"path":"https://aphp.github.io/heemod/reference/check_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Markov Model Transition Matrix — check_matrix","text":"function called eval_transition() used directly. Checks whether rows sum 1 probabilities 0 1.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Names — check_names","title":"Check Names — check_names","text":"Throws error names reserved.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Names — check_names","text":"","code":"check_names(x)"},{"path":"https://aphp.github.io/heemod/reference/check_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Names — check_names","text":"x character vector names.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Names — check_names","text":"Nothing, just throws error reserved name encountered.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Names — check_names","text":"Reserved names model_time anything starting ..","code":""},{"path":"https://aphp.github.io/heemod/reference/check_states.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Model States for Consistency — check_states","title":"Check Model States for Consistency — check_states","text":"internal use.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_states.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Model States for Consistency — check_states","text":"","code":"check_states(x)"},{"path":"https://aphp.github.io/heemod/reference/check_states.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Model States for Consistency — check_states","text":"x object class uneval_states.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_states.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Model States for Consistency — check_states","text":"NULL","code":""},{"path":"https://aphp.github.io/heemod/reference/check_states.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Model States for Consistency — check_states","text":"states value names.","code":""},{"path":"https://aphp.github.io/heemod/reference/check_strategy_index.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Strategy Index — check_strategy_index","title":"Check Strategy Index — check_strategy_index","text":"Check Strategy Index","code":""},{"path":"https://aphp.github.io/heemod/reference/check_strategy_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Strategy Index — check_strategy_index","text":"","code":"check_strategy_index(x, i, allow_multiple = FALSE)"},{"path":"https://aphp.github.io/heemod/reference/check_strategy_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Strategy Index — check_strategy_index","text":"x result run_model(). strategy index, character numeric. allow_multiple logical. Allow multiple strategy index?","code":""},{"path":"https://aphp.github.io/heemod/reference/check_strategy_index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Strategy Index — check_strategy_index","text":"Strategy names.","code":""},{"path":"https://aphp.github.io/heemod/reference/clean_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame Factor Variables to Character — clean_factors","title":"Convert Data Frame Factor Variables to Character — clean_factors","text":"Convert Data Frame Factor Variables Character","code":""},{"path":"https://aphp.github.io/heemod/reference/clean_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame Factor Variables to Character — clean_factors","text":"","code":"clean_factors(x)"},{"path":"https://aphp.github.io/heemod/reference/clean_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame Factor Variables to Character — clean_factors","text":"x data frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/clean_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame Factor Variables to Character — clean_factors","text":"data frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Run heemod on a Cluster — cluster","title":"Run heemod on a Cluster — cluster","text":"functions create delete cluster heemod. cluster created automagically used heemod functions.","code":""},{"path":"https://aphp.github.io/heemod/reference/cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run heemod on a Cluster — cluster","text":"","code":"use_cluster(num_cores, cluster = NULL, close = TRUE)  status_cluster(verbose = TRUE)  close_cluster()"},{"path":"https://aphp.github.io/heemod/reference/cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run heemod on a Cluster — cluster","text":"num_cores Number core. cluster custom cluster. See details. close Close existing cluster defining new one? verbose Print cluster info.","code":""},{"path":"https://aphp.github.io/heemod/reference/cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run heemod on a Cluster — cluster","text":"use_cluster close_cluster return TRUE invisibly case success. status_cluster returns TRUE cluster defined, FALSE otherwise.","code":""},{"path":"https://aphp.github.io/heemod/reference/cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run heemod on a Cluster — cluster","text":"usual workflow create cluster use_cluster, run functions run_psa() make use cluster. stop using cluster run close_cluster(). cluster status given status_cluster. custom cluster can passed use_cluster cluster argument. custom cluster needs work parallel::parLapply().","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Multiple Models — combine_models","title":"Combine Multiple Models — combine_models","text":"Given set models run different parameters, return aggregated results estimate population-level values.","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Multiple Models — combine_models","text":"","code":"combine_models(newmodels, weights, oldmodel)"},{"path":"https://aphp.github.io/heemod/reference/combine_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Multiple Models — combine_models","text":"newmodels list models run set multiple parameters. weights vector weights, length number parameter sets. oldmodel original model.","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Multiple Models — combine_models","text":"combined_models object, mostly similar result run_model(). plot summary methods available.","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_probs.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Probabilities — combine_probs","title":"Combine Probabilities — combine_probs","text":"Given several independent probabilities event, return final probability event.","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_probs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Probabilities — combine_probs","text":"","code":"combine_probs(...)"},{"path":"https://aphp.github.io/heemod/reference/combine_probs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Probabilities — combine_probs","text":"... Probability vectors.","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_probs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Probabilities — combine_probs","text":"probability vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_probs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine Probabilities — combine_probs","text":"function correct probabilities independent!","code":""},{"path":"https://aphp.github.io/heemod/reference/combine_probs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Probabilities — combine_probs","text":"","code":"(p1 <- runif(5)) #> [1] 0.080750138 0.834333037 0.600760886 0.157208442 0.007399441 (p2 <- runif(5)) #> [1] 0.4663935 0.4977774 0.2897672 0.7328820 0.7725215 combine_probs(p1, p2) #> [1] 0.5094823 0.9167983 0.7164473 0.7748752 0.7742047"},{"path":"https://aphp.github.io/heemod/reference/compute_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Count of Individual in Each State per Cycle — compute_counts.eval_part_surv","title":"Compute Count of Individual in Each State per Cycle — compute_counts.eval_part_surv","text":"Given initial number individual evaluated transition matrix, returns number individual per state per cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Count of Individual in Each State per Cycle — compute_counts.eval_part_surv","text":"","code":"# S3 method for eval_part_surv compute_counts(x, init, inflow, ...)  compute_counts(x, ...)  # S3 method for eval_matrix compute_counts(x, init, inflow, ...)"},{"path":"https://aphp.github.io/heemod/reference/compute_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Count of Individual in Each State per Cycle — compute_counts.eval_part_surv","text":"x eval_matrix eval_part_surv object. init numeric vector, length number model states. Number individuals model state beginning. inflow numeric vector, similar init. Number new individuals state per cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Count of Individual in Each State per Cycle — compute_counts.eval_part_surv","text":"cycle_counts object.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Count of Individual in Each State per Cycle — compute_counts.eval_part_surv","text":"Use method argument specify transitions supposed happen beginning end cycle. Alternatively linear interpolation cycles can performed.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_icer.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute ICER — compute_icer","title":"Compute ICER — compute_icer","text":"Compute ICER Markov models.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_icer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute ICER — compute_icer","text":"","code":"compute_icer(x, strategy_order = order(x$.effect), threshold = 30000)"},{"path":"https://aphp.github.io/heemod/reference/compute_icer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute ICER — compute_icer","text":"x Result run_model(). strategy_order Order strategies sorted. Default: increasing effect. threshold ICER threshold net monetary benefit computation.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_icer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute ICER — compute_icer","text":"data.frame computed ICER.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_icer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute ICER — compute_icer","text":"Models ordered effectiveness ICER computed sequentially.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Survival Distributions — compute_surv","title":"Evaluate Survival Distributions — compute_surv","text":"Generate either survival probabilities conditional probabilities event model cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Survival Distributions — compute_surv","text":"","code":"compute_surv(x, time, cycle_length = 1, type = c(\"prob\", \"survival\"), ...)"},{"path":"https://aphp.github.io/heemod/reference/compute_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Survival Distributions — compute_surv","text":"x survival object time model_time state_time predict. cycle_length value Markov cycle absolute time units. type Either prob, transition probabilities, surv, survival. ... arguments passed methods.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Survival Distributions — compute_surv","text":"Returns either survival probabilities conditional probabilities event cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_surv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Survival Distributions — compute_surv","text":"results compute_surv() memoised options(\"heemod.memotime\") (default: 1 hour) increase resampling performance.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute State Values per Cycle — compute_values","title":"Compute State Values per Cycle — compute_values","text":"Given states counts, computes total state values per cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute State Values per Cycle — compute_values","text":"","code":"compute_values(states, count_list, strategy_starting_values)"},{"path":"https://aphp.github.io/heemod/reference/compute_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute State Values per Cycle — compute_values","text":"states object class eval_state_list. count_list object class cycle_counts. strategy_starting_values object class uneval_starting_values","code":""},{"path":"https://aphp.github.io/heemod/reference/compute_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute State Values per Cycle — compute_values","text":"data.frame state values, one column per state value one row per cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/construct_part_surv_tib.html","id":null,"dir":"Reference","previous_headings":"","what":"construct a survival object from tabular specification — construct_part_surv_tib","title":"construct a survival object from tabular specification — construct_part_surv_tib","text":"construct survival object tabular specification","code":""},{"path":"https://aphp.github.io/heemod/reference/construct_part_surv_tib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"construct a survival object from tabular specification — construct_part_surv_tib","text":"","code":"construct_part_surv_tib(surv_def, ref, state_names, env = new.env())"},{"path":"https://aphp.github.io/heemod/reference/construct_part_surv_tib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"construct a survival object from tabular specification — construct_part_surv_tib","text":"surv_def data frame specification.  See details. ref data frame information fits. state_names names model states env environment","code":""},{"path":"https://aphp.github.io/heemod/reference/construct_part_surv_tib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"construct a survival object from tabular specification — construct_part_surv_tib","text":"list one element strategy.   element turn part_surv object, list two elements, pfs os.   elements survival objects various kinds, commonality can used compute_surv().","code":""},{"path":"https://aphp.github.io/heemod/reference/construct_part_surv_tib.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"construct a survival object from tabular specification — construct_part_surv_tib","text":"function meant used within tabular_input.R.   work well otherwise, environment unlikely need. columns surv_def:  .strategy, .type, .subset, dist, dist can either name distribution along parameters, reference fit example:  fit('exp') exp(rate = 0.5)","code":""},{"path":"https://aphp.github.io/heemod/reference/create_demographic_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read a Demographic Table — create_demographic_table","title":"Read a Demographic Table — create_demographic_table","text":"function mostly checks whether parameters correct.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_demographic_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read a Demographic Table — create_demographic_table","text":"","code":"create_demographic_table(newdata, params)"},{"path":"https://aphp.github.io/heemod/reference/create_demographic_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read a Demographic Table — create_demographic_table","text":"newdata data frame. params Parameters model, check columns demographic table (weight column) model.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_demographic_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read a Demographic Table — create_demographic_table","text":"data frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_demographic_table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read a Demographic Table — create_demographic_table","text":"optional .weights column can exist file.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_df_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Load Data From a Folder Into an Environment — create_df_from_tabular","title":"Load Data From a Folder Into an Environment — create_df_from_tabular","text":"Reads files containing data frames (tabular format) directory, loads environment available analysis.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_df_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load Data From a Folder Into an Environment — create_df_from_tabular","text":"","code":"create_df_from_tabular(df_dir, df_envir)"},{"path":"https://aphp.github.io/heemod/reference/create_df_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load Data From a Folder Into an Environment — create_df_from_tabular","text":"df_dir directory containing files. df_envir environment.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_df_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load Data From a Folder Into an Environment — create_df_from_tabular","text":"environment data frames.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_df_from_tabular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load Data From a Folder Into an Environment — create_df_from_tabular","text":"files must .csv, .xls, .xlsx format. file my_df.csv (my_df.xls, my_df.xlsx) loaded data frame my_df.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_matrix_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Transition Matrix From Tabular Input — create_matrix_from_tabular","title":"Create a Transition Matrix From Tabular Input — create_matrix_from_tabular","text":"Transforms tabular input defining transition matrix heemod object.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_matrix_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Transition Matrix From Tabular Input — create_matrix_from_tabular","text":"","code":"create_matrix_from_tabular(trans_probs, state_names, df_env = globalenv())"},{"path":"https://aphp.github.io/heemod/reference/create_matrix_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Transition Matrix From Tabular Input — create_matrix_from_tabular","text":"trans_probs Result one model parse_multi_spec(). state_names names states used transition matrix. df_env environment containing external data.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_matrix_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Transition Matrix From Tabular Input — create_matrix_from_tabular","text":"transition matrix.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_matrix_from_tabular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Transition Matrix From Tabular Input — create_matrix_from_tabular","text":"data frame trans_probs columns , , prob, prob probability transition state state. Prob can defined terms parameters, just using define_transition keyboard. Probabilities 0 need specified - automatically inserted. state names must used column transition matrix (otherwise can just get rid state). Absorbing states transition probability 1.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_model_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heemod Model From Tabular Files Info — create_model_from_tabular","title":"Create a heemod Model From Tabular Files Info — create_model_from_tabular","text":"Calls create_states_from_tabular() create_matrix_from_tabular().","code":""},{"path":"https://aphp.github.io/heemod/reference/create_model_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heemod Model From Tabular Files Info — create_model_from_tabular","text":"","code":"create_model_from_tabular(state_info, tm_info, df_env = globalenv())"},{"path":"https://aphp.github.io/heemod/reference/create_model_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heemod Model From Tabular Files Info — create_model_from_tabular","text":"state_info state tabular file (file path parsed file). tm_info transition matrix tabular file (file path parsed file). df_env environment containing external data.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_model_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heemod Model From Tabular Files Info — create_model_from_tabular","text":"heemod model returned define_strategy().","code":""},{"path":"https://aphp.github.io/heemod/reference/create_model_list_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Models Specified by Files — create_model_list_from_tabular","title":"Read Models Specified by Files — create_model_list_from_tabular","text":"Read Models Specified Files","code":""},{"path":"https://aphp.github.io/heemod/reference/create_model_list_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Models Specified by Files — create_model_list_from_tabular","text":"","code":"create_model_list_from_tabular(ref, df_env = globalenv())"},{"path":"https://aphp.github.io/heemod/reference/create_model_list_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Models Specified by Files — create_model_list_from_tabular","text":"ref Imported reference file. df_env environment containing external data.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_model_list_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Models Specified by Files — create_model_list_from_tabular","text":"list unevaluated models.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_options_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Model Options From a Tabular Input — create_options_from_tabular","title":"Create Model Options From a Tabular Input — create_options_from_tabular","text":"Create Model Options Tabular Input","code":""},{"path":"https://aphp.github.io/heemod/reference/create_options_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Model Options From a Tabular Input — create_options_from_tabular","text":"","code":"create_options_from_tabular(opt)"},{"path":"https://aphp.github.io/heemod/reference/create_options_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Model Options From a Tabular Input — create_options_from_tabular","text":"opt option data frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_options_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Model Options From a Tabular Input — create_options_from_tabular","text":"list model options.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_parameters_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Parameter Definition From Tabular Input — create_parameters_from_tabular","title":"Create a Parameter Definition From Tabular Input — create_parameters_from_tabular","text":"specified tabular file, DSA PSA can also created.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_parameters_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Parameter Definition From Tabular Input — create_parameters_from_tabular","text":"","code":"create_parameters_from_tabular(param_defs, df_env = globalenv())"},{"path":"https://aphp.github.io/heemod/reference/create_parameters_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Parameter Definition From Tabular Input — create_parameters_from_tabular","text":"param_defs parameter definition file. df_env environment containing external data.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_parameters_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Parameter Definition From Tabular Input — create_parameters_from_tabular","text":"parameter definition.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_parameters_from_tabular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Parameter Definition From Tabular Input — create_parameters_from_tabular","text":"tabular parameter definition file can following columns: parameter (parameter name, required), value (required), low high (present, deterministic sensitivity analysis performed), psa (definition distribution use probabilistic sensitivity analysis. columns ignored.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_states_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Create State Definitions From Tabular Input — create_states_from_tabular","title":"Create State Definitions From Tabular Input — create_states_from_tabular","text":"Transforms tabular input defining states heemod object.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_states_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create State Definitions From Tabular Input — create_states_from_tabular","text":"","code":"create_states_from_tabular(state_info, df_env = globalenv())"},{"path":"https://aphp.github.io/heemod/reference/create_states_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create State Definitions From Tabular Input — create_states_from_tabular","text":"state_info Result one model parse_multi_spec(). df_env environment containing external data.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_states_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create State Definitions From Tabular Input — create_states_from_tabular","text":"state list.","code":""},{"path":"https://aphp.github.io/heemod/reference/create_states_from_tabular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create State Definitions From Tabular Input — create_states_from_tabular","text":"Columns state_info besides .model state include costs utilities want keep track , appropriate values (may include parameters). cost utility discounted, additional column name \".discount.\\<cost\\>\" \".discount.\\<effect\\>\", appropriate cost effect, can included. discounting desired particular cost effect, corresponding column can omitted. discount column can contain single value - cost benefit must discounted amount state. Discounts can numbers parameters (need defined like ). input data frame expected contain state information models use analysis. information see vignette: vignette(\"file-input\", package = \"heemod\").","code":""},{"path":"https://aphp.github.io/heemod/reference/define_calibration_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Calibration Function — define_calibration_fn","title":"Define Calibration Function — define_calibration_fn","text":"Define function passed fn_values argument calibrate_model().","code":""},{"path":"https://aphp.github.io/heemod/reference/define_calibration_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Calibration Function — define_calibration_fn","text":"","code":"define_calibration_fn(   type,   strategy_names,   element_names,   cycles,   groups = NULL,   aggreg_fn = sum )"},{"path":"https://aphp.github.io/heemod/reference/define_calibration_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Calibration Function — define_calibration_fn","text":"type Type model values (count value). strategy_names Names strategies. element_names Names states (counts) state values (values). cycles Cycles interest. groups Optional grouping values (values group groups). aggreg_fn function aggregate values group.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_calibration_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Calibration Function — define_calibration_fn","text":"numeric vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_calibration_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Calibration Function — define_calibration_fn","text":"","code":"example(\"run_model\") #>  #> rn_mdl> # running a single model #> rn_mdl>  #> rn_mdl> mod1 <- #> rn_mdl+   define_strategy( #> rn_mdl+     transition = define_transition( #> rn_mdl+       .5, .5, #> rn_mdl+       .1, .9 #> rn_mdl+     ), #> rn_mdl+     define_state( #> rn_mdl+       cost = 543, #> rn_mdl+       ly = 1 #> rn_mdl+     ), #> rn_mdl+     define_state( #> rn_mdl+       cost = 432, #> rn_mdl+       ly = 1 #> rn_mdl+     ) #> rn_mdl+   ) #> No named state -> generating names. #> No named state -> generating names. #>  #> rn_mdl> res <- run_model( #> rn_mdl+   mod1, #> rn_mdl+   init = c(100, 0), #> rn_mdl+   cycles = 2, #> rn_mdl+   cost = cost, #> rn_mdl+   effect = ly #> rn_mdl+ ) #> No named model -> generating names. #>  #> rn_mdl> # running several models #> rn_mdl> mod2 <- #> rn_mdl+   define_strategy( #> rn_mdl+     transition = define_transition( #> rn_mdl+       .5, .5, #> rn_mdl+       .1, .9 #> rn_mdl+     ), #> rn_mdl+     define_state( #> rn_mdl+       cost = 789, #> rn_mdl+       ly = 1 #> rn_mdl+     ), #> rn_mdl+     define_state( #> rn_mdl+       cost = 456, #> rn_mdl+       ly = 1 #> rn_mdl+     ) #> rn_mdl+      #> rn_mdl+   ) #> No named state -> generating names. #> No named state -> generating names. #>  #> rn_mdl> res2 <- run_model( #> rn_mdl+   mod1, mod2, #> rn_mdl+   init = c(100, 0), #> rn_mdl+   cycles = 10, #> rn_mdl+   cost = cost, #> rn_mdl+   effect = ly #> rn_mdl+ ) #> No named model -> generating names.  f <- define_calibration_fn(   type = c(\"count\", \"count\", \"value\"),   strategy_names = c(\"I\", \"I\", \"II\"),   element_names = c(\"A\", \"B\", \"ly\"),   cycles = c(3, 5, 9),   groups = c(1, 1, 2),   aggreg_fn = mean )"},{"path":"https://aphp.github.io/heemod/reference/define_correlation.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Correlation Structure for Probabilistic\nUncertainty Analysis — define_correlation","title":"Define a Correlation Structure for Probabilistic\nUncertainty Analysis — define_correlation","text":"correlation need specified variable combinations, unspecified correlations assumed 0.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_correlation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Correlation Structure for Probabilistic\nUncertainty Analysis — define_correlation","text":"","code":"define_correlation(...)  define_correlation_(.dots)"},{"path":"https://aphp.github.io/heemod/reference/define_correlation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Correlation Structure for Probabilistic\nUncertainty Analysis — define_correlation","text":"... list parameter names correlation coefficients form var1, var2, cor(var1,    var2), var3, var4, cor(var3, var4), .... .dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_correlation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Correlation Structure for Probabilistic\nUncertainty Analysis — define_correlation","text":"object class correlation_matrix.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_correlation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Correlation Structure for Probabilistic\nUncertainty Analysis — define_correlation","text":"","code":"cm <- define_correlation(     var1, var2, .4,     var1, var3, -.2,     var2, var3, .1   )"},{"path":"https://aphp.github.io/heemod/reference/define_dsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Sensitivity Analysis — define_dsa","title":"Define a Sensitivity Analysis — define_dsa","text":"Define parameter variations Markov model sensitivity analysis.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_dsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Sensitivity Analysis — define_dsa","text":"","code":"define_dsa(...)  define_dsa_(par_names, low_dots, high_dots)"},{"path":"https://aphp.github.io/heemod/reference/define_dsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Sensitivity Analysis — define_dsa","text":"... list parameter names min/max values form var1, min(var1), max(var1), var2,   min(var2), max(var2), .... par_names String vector parameter names. low_dots, high_dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_dsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Sensitivity Analysis — define_dsa","text":"sensitivity object.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_dsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Sensitivity Analysis — define_dsa","text":"","code":"define_dsa(   a, 10, 45,   b, .5, 1.5 ) #>   Low High #> a 10  45   #> b 0.5 1.5"},{"path":"https://aphp.github.io/heemod/reference/define_inflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Inflow for a BIA — define_inflow","title":"Define Inflow for a BIA — define_inflow","text":"Define Inflow BIA","code":""},{"path":"https://aphp.github.io/heemod/reference/define_inflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Inflow for a BIA — define_inflow","text":"","code":"define_inflow(...)  define_inflow_(.dots)"},{"path":"https://aphp.github.io/heemod/reference/define_inflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Inflow for a BIA — define_inflow","text":"... Name-value pairs expressions defining inflow counts. .dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_inflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Inflow for a BIA — define_inflow","text":"object similar return value define_parameters().","code":""},{"path":"https://aphp.github.io/heemod/reference/define_init.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Initial Counts — define_init","title":"Define Initial Counts — define_init","text":"Define Initial Counts","code":""},{"path":"https://aphp.github.io/heemod/reference/define_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Initial Counts — define_init","text":"","code":"define_init(...)  define_init_(.dots)"},{"path":"https://aphp.github.io/heemod/reference/define_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Initial Counts — define_init","text":"... Name-value pairs expressions defining initial counts. .dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Initial Counts — define_init","text":"object similar return value define_parameters().","code":""},{"path":"https://aphp.github.io/heemod/reference/define_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Markov Model Parameters — define_parameters","title":"Define Markov Model Parameters — define_parameters","text":"Define parameters called compute transition matrix state values Markov model. Parameters can time dependent using model_time parameter.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Markov Model Parameters — define_parameters","text":"","code":"define_parameters(...)  define_parameters_(.dots)  # S3 method for uneval_parameters modify(.OBJECT, ...)"},{"path":"https://aphp.github.io/heemod/reference/define_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Markov Model Parameters — define_parameters","text":"... Name-value pairs expressions defining parameters. .dots Used work around non-standard evaluation. .OBJECT object class uneval_parameters.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Markov Model Parameters — define_parameters","text":"object class uneval_parameters (actually named list quosures).","code":""},{"path":"https://aphp.github.io/heemod/reference/define_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Markov Model Parameters — define_parameters","text":"Parameters defined sequentially, parameters defined earlier can called later expressions. Vector length explicitly set, instead stated relatively model_time (whose length depends number simulation cycles). Alternatively, dplyr functions dplyr::n() can used. function relies heavily dplyr package. Parameter definitions thus mimic use functions dplyr::mutate(). Variable names searched first parameter definition (parameters defined earlier visible) environment define_parameters called. modify function, existing parameters modified, new parameter can added. Parameter order matters since parameters defined earlier can referenced later expressions.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Markov Model Parameters — define_parameters","text":"","code":"# parameter 'age' depends on time: # simulating a cohort starting at 60 yo  define_parameters(   age_start = 60,   age = age_start + model_time ) #> 2 unevaluated parameters. #>  #> age_start = 60 #> age = age_start + model_time  # other uses of model_time are possible  define_parameters(   top_time = ifelse(model_time < 10, 1, 0) ) #> 1 unevaluated parameter. #>  #> top_time = ifelse(model_time < 10, 1, 0)  # more elaborate: risk function  define_parameters(   rate = 1 - exp(- model_time * .5) ) #> 1 unevaluated parameter. #>  #> rate = 1 - exp(-model_time * 0.5)  # dont explicitly state lengths # define_parameters( #   var = seq(1, 15, 2) # )   # instead rely on model_time or dplyr  # functions such as n() or row_number()  define_parameters(   var = seq(from = 1, length.out = n(), by = 3),   var2 = seq(1, length(model_time), 2) ) #> 2 unevaluated parameters. #>  #> var = seq(from = 1, length.out = n(), by = 3) #> var2 = seq(1, length(model_time), 2)  param <- define_parameters(   age_start = 60,   age = age_start + model_time )  # modify existing parameters  modify(   param,   age_start = 40 ) #> 2 unevaluated parameters. #>  #> age_start = 40 #> age = age_start + model_time  # cannot add new parameters  # modify( #   param, #   const = 4.4, #   age_2 = age ^ 2 # )"},{"path":"https://aphp.github.io/heemod/reference/define_part_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Partitioned Survival — define_part_surv","title":"Define Partitioned Survival — define_part_surv","text":"Define partitioned survival model progression-free survival overall survival.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_part_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Partitioned Survival — define_part_surv","text":"","code":"define_part_surv(   pfs,   os,   state_names,   terminal_state = FALSE,   cycle_length = 1 )  define_part_surv_(pfs, os, state_names, cycle_length = 1)"},{"path":"https://aphp.github.io/heemod/reference/define_part_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Partitioned Survival — define_part_surv","text":"pfs, os Either results flexsurv::flexsurvreg() define_surv_dist(). state_names named character vector, length 3 4. State names progression-free state, progression, (optionally terminal) death respectively. Elements named \"progression_free\", \"progression\", (optionally \"terminal\"), \"death\". See examples. terminal_state terminal state included? used state names provided. cycle_length value Markov cycle absolute time units.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_part_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Partitioned Survival — define_part_surv","text":"part_surv object.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_part_surv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Partitioned Survival — define_part_surv","text":"","code":"dist_pfs <- define_surv_dist(\"exp\", rate = 1) dist_os <- define_surv_dist(\"exp\", rate = .5)  define_part_surv(   pfs = dist_pfs,   os = dist_os,   state_names = c(     progression_free = \"A\",     progression = \"B\",     terminal = \"C\",     death = \"D\"   ) ) #> $pfs #> <quosure> #> expr: ^dist_pfs #> env:  0x55abb9e59578 #>  #> $os #> <quosure> #> expr: ^dist_os #> env:  0x55abb9e59578 #>  #> $state_names #> progression_free      progression         terminal            death  #>              \"A\"              \"B\"              \"C\"              \"D\"  #>  #> $cycle_length #> [1] 1 1 #>  #> attr(,\"class\") #> [1] \"part_surv\" # identical to: define_part_surv(   pfs = dist_pfs,   os = dist_os,   terminal_state = TRUE ) #> No named state -> generating names. #> $pfs #> <quosure> #> expr: ^dist_pfs #> env:  0x55abb9e59578 #>  #> $os #> <quosure> #> expr: ^dist_os #> env:  0x55abb9e59578 #>  #> $state_names #> progression_free      progression         terminal            death  #>              \"A\"              \"B\"              \"C\"              \"D\"  #>  #> $cycle_length #> [1] 1 1 #>  #> attr(,\"class\") #> [1] \"part_surv\""},{"path":"https://aphp.github.io/heemod/reference/define_psa.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Parameters Distribution for Probabilistic Analysis — define_psa","title":"Define Parameters Distribution for Probabilistic Analysis — define_psa","text":"Define properties parameter distributions correlation structure probabilistic uncertainty analysis Markov models.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_psa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Parameters Distribution for Probabilistic Analysis — define_psa","text":"","code":"define_psa(..., correlation)  define_psa_(.dots = list(), correlation)"},{"path":"https://aphp.github.io/heemod/reference/define_psa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Parameters Distribution for Probabilistic Analysis — define_psa","text":"... Formulas defining parameter distributions. correlation correlation matrix parameters output define_correlation(). .dots Pair/values expressions coercible quosures.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_psa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Parameters Distribution for Probabilistic Analysis — define_psa","text":"object class resamp_definition. Contains list_qdist, list quantile functions correlation correlation matrix.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_psa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Parameters Distribution for Probabilistic Analysis — define_psa","text":"distributions must defined within heemod (see distributions), defined define_distribution(). correlation matrix specified parameters assumed independant. correlation matrix need specified correlated parameters.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_psa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Parameters Distribution for Probabilistic Analysis — define_psa","text":"","code":"mc <- define_correlation(   age_init, cost_init, .4 )  define_psa(     age_init ~ normal(60, 10),     cost_init ~ normal(1000, 100),     correlation = mc ) #> A PSA definition: #>  #> 2 parameters resampled, 0 multinomial group.  # example with multinomial parameters  define_psa(   rate1 + rate2 + rate3 ~ multinomial(10, 50, 40),   a + b ~ multinomial(15, 30) ) #> A PSA definition: #>  #> 5 parameters resampled, 2 multinomial groups."},{"path":"https://aphp.github.io/heemod/reference/define_starting_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Starting State Values — define_starting_values","title":"Define Starting State Values — define_starting_values","text":"function meant used inside define_strategy() define_state().","code":""},{"path":"https://aphp.github.io/heemod/reference/define_starting_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Starting State Values — define_starting_values","text":"","code":"define_starting_values(...)  define_starting_values_(.dots)"},{"path":"https://aphp.github.io/heemod/reference/define_starting_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Starting State Values — define_starting_values","text":"... Name-value pairs expressions defining starting values. names must correspond existing state value. .dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_starting_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Starting State Values — define_starting_values","text":"object similar return value define_parameters().","code":""},{"path":"https://aphp.github.io/heemod/reference/define_starting_values.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Starting State Values — define_starting_values","text":"behaviour different following function using define_starting_values() argument. used inside define_strategy(), state values modified first cycle state used inside define_state(), state values modified counts entering state","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Markov Model State — define_state","title":"Define a Markov Model State — define_state","text":"Define values characterising Markov Model state 1 cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Markov Model State — define_state","text":"","code":"define_state(..., starting_values = define_starting_values())  define_state_(x)  # S3 method for state modify(.OBJECT, ...)"},{"path":"https://aphp.github.io/heemod/reference/define_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Markov Model State — define_state","text":"... Name-value pairs expressions defining state values. starting_values Optional starting values defined define_starting_values(). x Used work around non-standard evaluation. .OBJECT object class state.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Markov Model State — define_state","text":"object class state (actually named list quosures).","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a Markov Model State — define_state","text":"define_parameters(), state values defined sequentially. Later state definition can thus refer values defined earlier. modify function, existing values modified, new values can added. Values order matters since values defined earlier can referenced later expressions.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Markov Model State — define_state","text":"","code":"st <- define_state(   cost = 6453,   utility = .876 ) st #> A state with 2 values. #>  #> cost = 6453 #> utility = 0.876"},{"path":"https://aphp.github.io/heemod/reference/define_state_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Markov Model State List — define_state_list","title":"Define Markov Model State List — define_state_list","text":"Define states Markov model combining state objects.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Markov Model State List — define_state_list","text":"","code":"define_state_list(...)  define_state_list_(.dots)  # S3 method for uneval_state_list modify(.OBJECT, ...)"},{"path":"https://aphp.github.io/heemod/reference/define_state_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Markov Model State List — define_state_list","text":"... Name-value pairs expressions defining model states. .dots List states, used define_state_list_ avoid using .... .OBJECT uneval_states object.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Markov Model State List — define_state_list","text":"object class uneval_state_list (list state objects).","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Markov Model State List — define_state_list","text":"State names correspond specified define_transition(). states value names. modify function can modify existing states add new ones.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_state_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Markov Model State List — define_state_list","text":"","code":"if (FALSE) { s1 <- define_state(cost = 1, util = 1) s2 <- define_state(cost = 3, util = .4)  states_mod <- define_state_list(   healthy = s1,   sick = s2 )  states_mod  s1_bis <- define_state(cost = 0, util = 1) s3 <- define_state(cost = 10, util = .1)  modify(   states_mod,   healthy = s1_bis,   sicker = s3 ) }"},{"path":"https://aphp.github.io/heemod/reference/define_strategy.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Markov Model — define_strategy","title":"Define a Markov Model — define_strategy","text":"Combine information parameters, transition matrix states defined define_parameters(), define_transition() define_state() respectively.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_strategy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Markov Model — define_strategy","text":"","code":"define_strategy(   ...,   transition = define_transition(),   starting_values = define_starting_values() )  define_strategy_(transition, states, starting_values)"},{"path":"https://aphp.github.io/heemod/reference/define_strategy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Markov Model — define_strategy","text":"... Objects generated define_state(). object named state names transition matrix. transition object generated define_transition(). starting_values Optional starting values defined define_starting_values(). states List states, used define_strategy_ avoid using ....","code":""},{"path":"https://aphp.github.io/heemod/reference/define_strategy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Markov Model — define_strategy","text":"object class uneval_model (list containing unevaluated parameters, matrix states).","code":""},{"path":"https://aphp.github.io/heemod/reference/define_strategy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a Markov Model — define_strategy","text":"function checks whether objects compatible model (state names...). State values transition probabilities referencing state_time automatically expanded implicit tunnel states.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_strategy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Markov Model — define_strategy","text":"","code":"mat <- define_transition(   state_names = c(\"s1\", \"s2\"),   1 / c, 1 - 1/ c,   0, 1 )  s1 <- define_state(   cost = 234,   utility = 1   ) s2 <- define_state(   cost = 421,   utility = .5   )  define_strategy(   transition = mat,   s1 = s1,   s2 = s2 ) #> A Markov model strategy: #>  #>     2 states, #>     2 state values"},{"path":"https://aphp.github.io/heemod/reference/define_surv_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Survival Distribution — define_surv_dist","title":"Define a Survival Distribution — define_surv_dist","text":"Define parametric survival distribution.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Survival Distribution — define_surv_dist","text":"","code":"define_surv_dist(   distribution = c(\"exp\", \"weibull\", \"weibullPH\", \"lnorm\", \"llogis\", \"gamma\", \"gompertz\",     \"gengamma\", \"gengamma.orig\", \"genf\", \"genf.orig\"),   ... )"},{"path":"https://aphp.github.io/heemod/reference/define_surv_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Survival Distribution — define_surv_dist","text":"distribution parametric survival distribution. ... Additional distribution parameters (see respective distribution help pages).","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Survival Distribution — define_surv_dist","text":"surv_dist object.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Survival Distribution — define_surv_dist","text":"","code":"define_surv_dist(distribution = \"exp\", rate = .5) #> $distribution #> [1] \"exp\" #>  #> $rate #> [1] 0.5 #>  #> attr(,\"class\") #> [1] \"surv_dist\"   \"surv_object\" define_surv_dist(distribution = \"gompertz\", rate = .5, shape = 1) #> $distribution #> [1] \"gompertz\" #>  #> $rate #> [1] 0.5 #>  #> $shape #> [1] 1 #>  #> attr(,\"class\") #> [1] \"surv_dist\"   \"surv_object\""},{"path":"https://aphp.github.io/heemod/reference/define_surv_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Fitted Survival Model — define_surv_fit","title":"Define a Fitted Survival Model — define_surv_fit","text":"Define fitted survival models Kaplan-Meier estimator parametric distributions","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Fitted Survival Model — define_surv_fit","text":"","code":"define_surv_fit(x)"},{"path":"https://aphp.github.io/heemod/reference/define_surv_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Fitted Survival Model — define_surv_fit","text":"x survfit flexsurvreg object","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Fitted Survival Model — define_surv_fit","text":"surv_object object.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Fitted Survival Model — define_surv_fit","text":"","code":"library(survival)  define_surv_fit(   survfit(Surv(time, status) ~ 1, data = colon) ) #> survfit(Surv(time, status) ~ 1, data = colon) #> attr(,\"class\") #> [1] \"surv_fit\"    \"surv_object\"  define_surv_fit(   flexsurv::flexsurvreg(Surv(time, status) ~ 1, data = colon, dist = \"exp\") ) #> flexsurv::flexsurvreg(Surv(time, status) ~ 1, data = colon, dist = \"exp\") #> attr(,\"class\") #> [1] \"surv_fit\"    \"surv_object\""},{"path":"https://aphp.github.io/heemod/reference/define_surv_spline.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a Restricted Cubic Spline Survival Distribution — define_surv_spline","title":"Define a Restricted Cubic Spline Survival Distribution — define_surv_spline","text":"Define restricted cubic spline parametric survival distribution.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_spline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a Restricted Cubic Spline Survival Distribution — define_surv_spline","text":"","code":"define_surv_spline(scale = c(\"hazard\", \"odds\", \"normal\"), ...)"},{"path":"https://aphp.github.io/heemod/reference/define_surv_spline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a Restricted Cubic Spline Survival Distribution — define_surv_spline","text":"scale \"hazard\", \"odds\", \"normal\", described flexsurvspline. default knots addition boundaries, models reduce Weibull, log-logistic log-normal respectively. scale must common times. ... Additional distribution parameters (see respective distribution help pages).","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_spline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a Restricted Cubic Spline Survival Distribution — define_surv_spline","text":"surv_dist object.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_spline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a Restricted Cubic Spline Survival Distribution — define_surv_spline","text":"","code":"define_surv_spline(   scale = \"hazard\",    gamma = c(-18.3122, 2.7511, 0.2292),    knots=c(4.276666, 6.470800, 7.806289) ) #> $distribution #> [1] \"survspline\" #>  #> $scale #> [1] \"hazard\" #>  #> $gamma #> [1] -18.3122   2.7511   0.2292 #>  #> $knots #> [1] 4.276666 6.470800 7.806289 #>  #> attr(,\"class\") #> [1] \"surv_dist\"   \"surv_object\" define_surv_spline(   scale = \"odds\",    gamma = c(-18.5809, 2.7973, 0.2035),    knots=c(4.276666, 6.470800, 7.806289) ) #> $distribution #> [1] \"survspline\" #>  #> $scale #> [1] \"odds\" #>  #> $gamma #> [1] -18.5809   2.7973   0.2035 #>  #> $knots #> [1] 4.276666 6.470800 7.806289 #>  #> attr(,\"class\") #> [1] \"surv_dist\"   \"surv_object\""},{"path":"https://aphp.github.io/heemod/reference/define_surv_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a survival distribution based on explicit survival probabilities — define_surv_table","title":"Define a survival distribution based on explicit survival probabilities — define_surv_table","text":"Define survival distribution based explicit survival probabilities","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a survival distribution based on explicit survival probabilities — define_surv_table","text":"","code":"define_surv_table(x)  # S3 method for data.frame define_surv_table(x)  # S3 method for character define_surv_table(x)"},{"path":"https://aphp.github.io/heemod/reference/define_surv_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a survival distribution based on explicit survival probabilities — define_surv_table","text":"x data frame columns time survival","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a survival distribution based on explicit survival probabilities — define_surv_table","text":"surv_table object, can used compute_surv().","code":""},{"path":"https://aphp.github.io/heemod/reference/define_surv_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a survival distribution based on explicit survival probabilities — define_surv_table","text":"","code":"x <- data.frame(time = c(0, 1, 5, 10), survival = c(1, 0.9, 0.7, 0.5))  define_surv_table(x) #>   time survival #> 1    0      1.0 #> 2    1      0.9 #> 3    5      0.7 #> 4   10      0.5"},{"path":"https://aphp.github.io/heemod/reference/define_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Define Transition Matrix for Markov Model — define_transition","title":"Define Transition Matrix for Markov Model — define_transition","text":"Define matrix transition probabilities. Probability can depend parameters defined define_parameters(), can thus time-dependent.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define Transition Matrix for Markov Model — define_transition","text":"","code":"define_transition(..., state_names)  define_transition_(.dots, state_names)  # S3 method for uneval_matrix modify(.OBJECT, ...)  # S3 method for uneval_matrix plot(x, relsize = 0.75, shadow.size = 0, latex = TRUE, ...)"},{"path":"https://aphp.github.io/heemod/reference/define_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define Transition Matrix for Markov Model — define_transition","text":"... Name-value pairs expressions defining matrix cells. Can refer parameters defined define_parameters(). plot, additional arguments passed diagram::plotmat(). state_names character vector, optional. State names. .dots Used work around non-standard evaluation. .OBJECT object class uneval_matrix. x uneval_matrix plot. relsize Argument passed diagram::plotmat(). shadow.size Argument passed diagram::plotmat(). latex Argument passed diagram::plotmat().","code":""},{"path":"https://aphp.github.io/heemod/reference/define_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define Transition Matrix for Markov Model — define_transition","text":"object class uneval_matrix (actually named list quosures expressions).","code":""},{"path":"https://aphp.github.io/heemod/reference/define_transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define Transition Matrix for Markov Model — define_transition","text":"Matric cells listed row. Parameters names searched first parameter object defined define_parameters() linked matrix define_strategy(); environment matrix defined. complementary probability row probabilities can conveniently referred C. matrix code can re-indented readability reindent_transition(). matrix size checked step (matrix must square). conditions (row sums equal 1) tested later, model evaluation. modify function, existing matrix cells replaced new expression. Cells referenced name. Cell naming follows cell_x_y convention, x row number y column number.","code":""},{"path":"https://aphp.github.io/heemod/reference/define_transition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define Transition Matrix for Markov Model — define_transition","text":"","code":"# simple 3x3 transition matrix  mat_1 <- define_transition(   .2, 0, .8,   0, .1, .9,   0, 0, 1 ) #> No named state -> generating names. mat_1 #> A transition matrix, 3 states. #>  #>   A   B   C   #> A 0.2     0.8 #> B     0.1 0.9 #> C         1    plot(mat_1) #> Loading required namespace: diagram   # referencing parameters # rr must be present in a parameter object # that must later be linked with define_strategy  mat_2 <- define_transition(   .5 - rr, rr,   .4, .6 ) #> No named state -> generating names. mat_2 #> A transition matrix, 2 states. #>  #>   A        B   #> A 0.5 - rr rr  #> B 0.4      0.6  reindent_transition(mat_2) #> Loading required namespace: stringr #> state_names = c( #> \"A\"     , \"B\") #> 0.5 - rr, rr , #> 0.4     , 0.6  # can also use C  define_transition(   C, rr,   .4, .6 ) #> No named state -> generating names. #> A transition matrix, 2 states. #>  #>   A   B   #> A C   rr  #> B 0.4 0.6  # updating cells from mat_1  modify(   mat_1,   cell_2_1 = .2,   cell_2_3 = .7 ) #> A transition matrix, 3 states. #>  #>   A   B   C   #> A 0.2     0.8 #> B 0.2 0.1 0.7 #> C         1    # only matrix size is check, it is thus possible # to define an incorrect matrix  # this matrix will generate an error later, # during model evaluation  define_transition(   .5, 3,   -1, 2 ) #> No named state -> generating names. #> A transition matrix, 2 states. #>  #>   A   B #> A 0.5 3 #> B -1  2"},{"path":"https://aphp.github.io/heemod/reference/discount.html","id":null,"dir":"Reference","previous_headings":"","what":"Discount a Quantity Over Time. Should be a scalar if time is\nspecified, a vector otherwise — discount","title":"Discount a Quantity Over Time. Should be a scalar if time is\nspecified, a vector otherwise — discount","text":"Discount Quantity Time. scalar time specified, vector otherwise","code":""},{"path":"https://aphp.github.io/heemod/reference/discount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discount a Quantity Over Time. Should be a scalar if time is\nspecified, a vector otherwise — discount","text":"","code":"discount(x, r, first = FALSE, period = 1, linear = FALSE, time)"},{"path":"https://aphp.github.io/heemod/reference/discount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discount a Quantity Over Time. Should be a scalar if time is\nspecified, a vector otherwise — discount","text":"x numeric. quantity discount. r discount rate. first logical. discounting start first value? period Number cycle per unit discount rate. linear logical. discount rate vary linearly along whole period? time cycle number.","code":""},{"path":"https://aphp.github.io/heemod/reference/discount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discount a Quantity Over Time. Should be a scalar if time is\nspecified, a vector otherwise — discount","text":"numeric vector length x.","code":""},{"path":"https://aphp.github.io/heemod/reference/discount.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Discount a Quantity Over Time. Should be a scalar if time is\nspecified, a vector otherwise — discount","text":"unit discount rate year cycle duration 1 month, period 12.","code":""},{"path":"https://aphp.github.io/heemod/reference/discount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discount a Quantity Over Time. Should be a scalar if time is\nspecified, a vector otherwise — discount","text":"","code":"discount(rep(10, 5), .02) #> [1] 10.000000  9.803922  9.611688  9.423223  9.238454 discount(rep(10, 5), .02, first = FALSE) #> [1] 10.000000  9.803922  9.611688  9.423223  9.238454   discount(1000, .05, time = 10) #> [1] 644.6089 discount(1000, .05, period = 2, time = 1:10) #>  [1] 1000.0000 1000.0000  952.3810  952.3810  907.0295  907.0295  863.8376 #>  [8]  863.8376  822.7025  822.7025 discount(1000, .05, period = 2, time = 1:10, linear = TRUE) #>  [1] 1000.0000  975.9001  952.3810  929.4286  907.0295  885.1701  863.8376 #>  [8]  843.0192  822.7025  802.8754"},{"path":"https://aphp.github.io/heemod/reference/discount_hack.html","id":null,"dir":"Reference","previous_headings":"","what":"Hack to Work Around a Discounting Issue — discount_hack","title":"Hack to Work Around a Discounting Issue — discount_hack","text":"function hack avoid problem discounting argument constant.","code":""},{"path":"https://aphp.github.io/heemod/reference/discount_hack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hack to Work Around a Discounting Issue — discount_hack","text":"","code":"discount_hack(.dots)"},{"path":"https://aphp.github.io/heemod/reference/discount_hack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hack to Work Around a Discounting Issue — discount_hack","text":".dots state object.","code":""},{"path":"https://aphp.github.io/heemod/reference/discount_hack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hack to Work Around a Discounting Issue — discount_hack","text":"modified state object.","code":""},{"path":"https://aphp.github.io/heemod/reference/discount_hack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hack to Work Around a Discounting Issue — discount_hack","text":"hack consists replacing calls discount(x) discount(x * rep(1, dplyr::n())) ensure x recycled correct length.","code":""},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy.html","id":null,"dir":"Reference","previous_headings":"","what":"Dispatch Values According to Strategy — dispatch_strategy","title":"Dispatch Values According to Strategy — dispatch_strategy","text":"Returns different values depending strategy.","code":""},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dispatch Values According to Strategy — dispatch_strategy","text":"","code":"dispatch_strategy(.strategy, ...)"},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dispatch Values According to Strategy — dispatch_strategy","text":".strategy Optional strategy name. specified implicitely added. ... Values parameter named depending strategy.","code":""},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dispatch Values According to Strategy — dispatch_strategy","text":"vector values.","code":""},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dispatch Values According to Strategy — dispatch_strategy","text":"","code":"define_parameters(   val = 456,   x = dispatch_strategy(     strat_1 = 1234,     strat_2 = 9876,     strat_3 = val * 2 + model_time   ) ) #> 2 unevaluated parameters. #>  #> val = 456 #> x = dispatch_strategy(...)"},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy_hack.html","id":null,"dir":"Reference","previous_headings":"","what":"Hack to Automate Use of Strategy Name — dispatch_strategy_hack","title":"Hack to Automate Use of Strategy Name — dispatch_strategy_hack","text":"function hack automate definition argument .strategy dispatch_strategy().","code":""},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy_hack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hack to Automate Use of Strategy Name — dispatch_strategy_hack","text":"","code":"dispatch_strategy_hack(.dots)"},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy_hack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hack to Automate Use of Strategy Name — dispatch_strategy_hack","text":".dots quosures object.","code":""},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy_hack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hack to Automate Use of Strategy Name — dispatch_strategy_hack","text":"modified quosures object.","code":""},{"path":"https://aphp.github.io/heemod/reference/dispatch_strategy_hack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hack to Automate Use of Strategy Name — dispatch_strategy_hack","text":"hack consists replacing calls dispatch_strategy(...) dispatch_strategy(.strategy = strategy, ...) .strategy_name already defined.","code":""},{"path":"https://aphp.github.io/heemod/reference/distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Probability Density Functions for Probabilistic\nUncertainty Analysis — distributions","title":"Probability Density Functions for Probabilistic\nUncertainty Analysis — distributions","text":"Define distribution PSA parameters.","code":""},{"path":"https://aphp.github.io/heemod/reference/distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Probability Density Functions for Probabilistic\nUncertainty Analysis — distributions","text":"","code":"normal(mean, sd)  lognormal(mean, sd, meanlog, sdlog)  gamma(mean, sd)  binomial(prob, size)  multinomial(...)  logitnormal(mu, sigma)  beta(shape1, shape2)  triangle(lower, upper, peak = (lower + upper)/2)  poisson(mean)  define_distribution(x)  beta(shape1, shape2)  triangle(lower, upper, peak = (lower + upper)/2)  use_distribution(distribution, smooth = TRUE)"},{"path":"https://aphp.github.io/heemod/reference/distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Probability Density Functions for Probabilistic\nUncertainty Analysis — distributions","text":"mean Distribution mean. sd Distribution standard deviation. meanlog Mean log scale. sdlog SD log scale. prob Proportion. size Size sample used estimate proportion. ... Dirichlet distribution parameters. mu Mean logit scale. sigma SD logit scale. shape1 beta distribution shape2 beta distribution lower lower bound triangular distribution. upper upper bound triangular distribution. peak peak triangular distribution. x distribution function, see details. distribution numeric vector observations defining distribution, usually output MCMC fit. smooth Use gaussian kernel smoothing?","code":""},{"path":"https://aphp.github.io/heemod/reference/distributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Probability Density Functions for Probabilistic\nUncertainty Analysis — distributions","text":"functions exported, used define_psa(). specify user-made function use define_distribution(). use_distribution() uses gaussian kernel smoothing bandwidth parameter calculated stats::density(). Values unobserved quantiles calculated linear interpolation. define_distribution() takes argument function single argument, x, corresponding vector quantiles. returns distribution values given quantiles. See examples.","code":""},{"path":"https://aphp.github.io/heemod/reference/distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Probability Density Functions for Probabilistic\nUncertainty Analysis — distributions","text":"","code":"define_distribution(   function(x) stats::qexp(p = x, rate = 0.5) ) #> [[1]] #> function(x) stats::qexp(p = x, rate = 0.5) #> <environment: 0x55abb84ccfe0> #>   # a mixture of 2 gaussians x <- c(rnorm(100), rnorm(100, 6)) plot(density(x))   use_distribution(x) #> [[1]] #> function (x)  #> { #>     if (smooth) { #>         noise <- stats::rnorm(n = length(x), mean = 0, sd = stats::density(distribution)$bw) #>     } #>     else { #>         noise <- 0 #>     } #>     (stats::approxfun(x = seq(0, 1, length = length(distribution)),  #>         y = distribution))(x) + noise #> } #> <bytecode: 0x55abbaf94970> #> <environment: 0x55abbaf93940> #>"},{"path":"https://aphp.github.io/heemod/reference/eval_models_from_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Models From a Tabular Source — eval_models_from_tabular","title":"Evaluate Models From a Tabular Source — eval_models_from_tabular","text":"Execute full set analyses, possibly including discrete sensitivity analysis, probabilistic sensitivity analysis, analyses across demographics.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_models_from_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Models From a Tabular Source — eval_models_from_tabular","text":"","code":"eval_models_from_tabular(   inputs,   run_dsa = TRUE,   run_psa = TRUE,   run_demo = TRUE )"},{"path":"https://aphp.github.io/heemod/reference/eval_models_from_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Models From a Tabular Source — eval_models_from_tabular","text":"inputs Result gather_model_info(). run_dsa Run DSA? run_psa Run PSA? run_demo Run demographic analysis?","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_models_from_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Models From a Tabular Source — eval_models_from_tabular","text":"list models (always) unevaluated model. model_runs (always) evaluated models dsa (deterministic sensitivity analysis) - appropriate parameters provided psa (probabilistic sensitivity analysis) - appropriate parameters provided demographics results across different demographic groups - appropriate parameters provided","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Markov model parameters — eval_parameters","title":"Evaluate Markov model parameters — eval_parameters","text":"Evaluate parameters specified define_parameters, given number cycles.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Markov model parameters — eval_parameters","text":"","code":"eval_parameters(x, cycles = 1, strategy_name = NA)"},{"path":"https://aphp.github.io/heemod/reference/eval_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Markov model parameters — eval_parameters","text":"x uneval_parameters object. cycles integer. Number cycles simulate.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Markov model parameters — eval_parameters","text":"object class eval_parameters (actually data.frame one column per parameter one row per cycle).","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Markov model parameters — eval_parameters","text":"","code":"param <- define_parameters(   age_start = 60,   age = age_start + model_time )  heemod:::eval_parameters(param, cycles = 15) #>    model_time markov_cycle strategy age_start age #> 1           1            1       NA        60  61 #> 2           2            2       NA        60  62 #> 3           3            3       NA        60  63 #> 4           4            4       NA        60  64 #> 5           5            5       NA        60  65 #> 6           6            6       NA        60  66 #> 7           7            7       NA        60  67 #> 8           8            8       NA        60  68 #> 9           9            9       NA        60  69 #> 10         10           10       NA        60  70 #> 11         11           11       NA        60  71 #> 12         12           12       NA        60  72 #> 13         13           13       NA        60  73 #> 14         14           14       NA        60  74 #> 15         15           15       NA        60  75"},{"path":"https://aphp.github.io/heemod/reference/eval_resample.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Resampling Definition — eval_resample","title":"Evaluate Resampling Definition — eval_resample","text":"Evaluate Resampling Definition","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_resample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Resampling Definition — eval_resample","text":"","code":"eval_resample(psa, N)"},{"path":"https://aphp.github.io/heemod/reference/eval_resample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Resampling Definition — eval_resample","text":"psa define_psa() object. N > 0. Number simulation run.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_resample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Resampling Definition — eval_resample","text":"data.frame resampled values column per parameter N rows.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_state_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Markov Model States — eval_state_list","title":"Evaluate Markov Model States — eval_state_list","text":"Evaluate Markov Model States","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_state_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Markov Model States — eval_state_list","text":"","code":"eval_state_list(x, parameters)"},{"path":"https://aphp.github.io/heemod/reference/eval_state_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Markov Model States — eval_state_list","text":"x uneval_state_list object generated define_state_list(). parameters eval_parameters object generated eval_parameters().","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_state_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Markov Model States — eval_state_list","text":"eval_states object, list one data.frame per state containing column per state value line per cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Strategy — eval_strategy","title":"Evaluate Strategy — eval_strategy","text":"Given unevaluated strategy, initial number individual number cycle compute, returns evaluated version objects count individual per state per model cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Strategy — eval_strategy","text":"","code":"eval_strategy(   strategy,   parameters,   cycles,   init,   method,   expand_limit,   inflow,   strategy_name )"},{"path":"https://aphp.github.io/heemod/reference/eval_strategy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Strategy — eval_strategy","text":"strategy uneval_strategy object. parameters Optional. object generated define_parameters(). cycles positive integer. Number Markov Cycles compute. init numeric vector, length number model states. Number individuals model state beginning. method Counting method. expand_limit named vector state expansion limits. inflow Numeric vector, similar init. Number new individuals state per cycle. strategy_name Name strategy.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Strategy — eval_strategy","text":"eval_strategy object (actually list evaluated parameters, matrix, states cycles counts).","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Strategy — eval_strategy","text":"init need integer. E.g. c(= 1, B = 0.5, C = 0.1, ...).","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate Strategy — eval_strategy","text":"","code":"param <- define_parameters(   a = model_time + 1 * 2 )  mat <- define_transition(   1-1/a, 1/a,   .1,    .9 ) #> No named state -> generating names.  mod <- define_strategy(   transition = mat,   A = define_state(cost = 10),   B = define_state(cost = 2) )  heemod:::eval_strategy(   strategy = mod,   parameters = param,   init = define_init(A = 10, B = 5),   cycles = 5,   method = \"end\",   inflow = define_inflow(A = 0, B = 0),   strategy_name = \"A\",   expand_limit = c(A = 5, B = 5) ) #> $parameters #>   model_time markov_cycle strategy a #> 1          1            1        A 3 #> 2          2            2        A 4 #> 3          3            3        A 5 #> 4          4            4        A 6 #> 5          5            5        A 7 #>  #> $complete_parameters #>   model_time markov_cycle strategy a #> 1          1            1        A 3 #>  #> $transition #> An evaluated transition matrix, 2 states, 5 markov cycles. #>  #> State names: #>  #> A #> B #>  #> [[1]] #>           [,1]      [,2] #> [1,] 0.6666667 0.3333333 #> [2,] 0.1000000 0.9000000 #>  #> [[2]] #>      [,1] [,2] #> [1,] 0.75 0.25 #> [2,] 0.10 0.90 #>  #> [[3]] #>      [,1] [,2] #> [1,]  0.8  0.2 #> [2,]  0.1  0.9 #>  #> [[4]] #>           [,1]      [,2] #> [1,] 0.8333333 0.1666667 #> [2,] 0.1000000 0.9000000 #>  #> [[5]] #>           [,1]      [,2] #> [1,] 0.8571429 0.1428571 #> [2,] 0.1000000 0.9000000 #>  #>  #> $states #> 2 evaluated states, 5 Markov cycles. #>  #> $counts #> # A tibble: 5 × 2 #>       A     B #>   <dbl> <dbl> #> 1  7.17  7.83 #> 2  6.16  8.84 #> 3  5.81  9.19 #> 4  5.76  9.24 #> 5  5.86  9.14 #>  #> $values #>   model_time     cost #> 1          1 87.33333 #> 2          2 79.26667 #> 3          3 76.48667 #> 4          4 76.09022 #> 5          5 76.89688 #>  #> $e_init #>  A  B  #> 10  5  #>  #> $e_inflow #>   A B #> 1 0 0 #> 2 0 0 #> 3 0 0 #> 4 0 0 #> 5 0 0 #>  #> $n_indiv #> [1] 15 #>  #> $cycles #> [1] 5 #>  #> $expand_limit #> A B  #> 5 5  #>  #> attr(,\"class\") #> [1] \"eval_strategy\""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy_newdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Iteratively Evaluate a Markov Model With New Parameter\nValues — eval_strategy_newdata","title":"Iteratively Evaluate a Markov Model With New Parameter\nValues — eval_strategy_newdata","text":"Given data.frame set new parameters values per row, iteratively evaluate model set new values.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy_newdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Iteratively Evaluate a Markov Model With New Parameter\nValues — eval_strategy_newdata","text":"","code":"eval_strategy_newdata(x, strategy = 1, newdata)"},{"path":"https://aphp.github.io/heemod/reference/eval_strategy_newdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Iteratively Evaluate a Markov Model With New Parameter\nValues — eval_strategy_newdata","text":"x Result run_model(). strategy Name index model recompute. newdata data.frame whose names match parameters names. strategy evaluated iteratively, taking successive values row.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy_newdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Iteratively Evaluate a Markov Model With New Parameter\nValues — eval_strategy_newdata","text":"data.frame containing values newdata Markov Model evaluation res.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy_newdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Iteratively Evaluate a Markov Model With New Parameter\nValues — eval_strategy_newdata","text":"New parameters missing value (NA) replace existing parameters.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_strategy_newdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Iteratively Evaluate a Markov Model With New Parameter\nValues — eval_strategy_newdata","text":"","code":"par1 <- define_parameters(   a = 1,   b = 1 / (model_time + a) )  mat1 <- define_transition(   1-b, b,   0, 1 ) #> No named state -> generating names. mod1 <- define_strategy(   transition = mat1,   define_state(var = a),   define_state(var = a * model_time) ) #> No named state -> generating names.  res1 <- run_model(   mod1,   parameters = par1,   cycles = 5,   init = 1:0,   method = \"end\" ) #> No named model -> generating names. #> Warning: No cost and/or effect defined, cannot find root strategy. #> Warning: No effect defined, cannot find noncomparable strategy. #> Warning: No cost and/or effect defined, cannot find root strategy.  new_tab <- data.frame(   a = 1:10 )  heemod:::eval_strategy_newdata(   res1,   newdata = new_tab ) #> # A tibble: 10 × 2 #>    .mod           a #>    <list>     <int> #>  1 <evl_strt>     1 #>  2 <evl_strt>     2 #>  3 <evl_strt>     3 #>  4 <evl_strt>     4 #>  5 <evl_strt>     5 #>  6 <evl_strt>     6 #>  7 <evl_strt>     7 #>  8 <evl_strt>     8 #>  9 <evl_strt>     9 #> 10 <evl_strt>    10"},{"path":"https://aphp.github.io/heemod/reference/eval_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Survival Distributions — eval_surv","title":"Evaluate Survival Distributions — eval_surv","text":"Generate either survival probabilities conditional probabilities event model cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Survival Distributions — eval_surv","text":"","code":"eval_surv(x, time, ...)  compute_surv_(x, time, cycle_length = 1, type = c(\"prob\", \"survival\"), ...)  # S3 method for surv_fit eval_surv(x, time, ...)  # S3 method for default eval_surv(x, ...)  # S3 method for survfit eval_surv(x, time, ...)  # S3 method for flexsurvreg eval_surv(x, time, ...)  # S3 method for surv_model eval_surv(x, time, ...)  # S3 method for surv_projection eval_surv(x, time, ...)  # S3 method for surv_pooled eval_surv(x, time, ...)  # S3 method for surv_ph eval_surv(x, time, ...)  # S3 method for surv_shift eval_surv(x, time, ...)  # S3 method for surv_aft eval_surv(x, time, ...)  # S3 method for surv_po eval_surv(x, time, ...)  # S3 method for surv_add_haz eval_surv(x, time, ...)  # S3 method for surv_dist eval_surv(x, time, ...)  # S3 method for surv_table eval_surv(x, time, ...)"},{"path":"https://aphp.github.io/heemod/reference/eval_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Survival Distributions — eval_surv","text":"x survival object time model_time state_time predict. ... arguments passed methods. cycle_length value Markov cycle absolute time units. type Either prob, transition probabilities, surv, survival.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_surv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Survival Distributions — eval_surv","text":"Returns either survival probabilities conditional probabilities event cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_surv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Survival Distributions — eval_surv","text":"results compute_surv() memoised options(\"heemod.memotime\") (default: 1 hour) increase resampling performance.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Markov Model Transition Matrix — eval_transition","title":"Evaluate Markov Model Transition Matrix — eval_transition","text":"Evaluate transition matrix using evaluated parameters.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Markov Model Transition Matrix — eval_transition","text":"","code":"eval_transition(x, parameters)"},{"path":"https://aphp.github.io/heemod/reference/eval_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Markov Model Transition Matrix — eval_transition","text":"x uneval_matrix object. parameters eval_parameters object.","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Markov Model Transition Matrix — eval_transition","text":"eval_matrix object (actually list transition matrices, one per cycle).","code":""},{"path":"https://aphp.github.io/heemod/reference/eval_transition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate Markov Model Transition Matrix — eval_transition","text":"Runs checks transition matrix evaluation. functions heavily optimized, thus can difficult read. Good luck...","code":""},{"path":"https://aphp.github.io/heemod/reference/expand_if_necessary.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand States and Transition — expand_if_necessary","title":"Expand States and Transition — expand_if_necessary","text":"Given unevaluated strategy, initial number individual number cycle compute, returns evaluated version objects count individual per state per model cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/expand_if_necessary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand States and Transition — expand_if_necessary","text":"","code":"expand_if_necessary(   strategy,   parameters,   cycles,   init,   method,   expand_limit,   inflow,   strategy_name )"},{"path":"https://aphp.github.io/heemod/reference/expand_if_necessary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand States and Transition — expand_if_necessary","text":"strategy uneval_strategy object. parameters Optional. object generated define_parameters(). cycles positive integer. Number Markov Cycles compute. init numeric vector, length number model states. Number individuals model state beginning. method Counting method. expand_limit named vector state expansion limits. inflow Numeric vector, similar init. Number new individuals state per cycle. strategy_name Name strategy.","code":""},{"path":"https://aphp.github.io/heemod/reference/expand_if_necessary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand States and Transition — expand_if_necessary","text":"Expanded states, transitions, input inflow (require expansion; otherwise return inputs unchanged).","code":""},{"path":"https://aphp.github.io/heemod/reference/expand_if_necessary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expand States and Transition — expand_if_necessary","text":"init need integer. E.g. c(= 1, B = 0.5, C = 0.1, ...).","code":""},{"path":"https://aphp.github.io/heemod/reference/expand_if_necessary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand States and Transition — expand_if_necessary","text":"","code":"param <- define_parameters(   a = model_time + 1 * 2 )  mat <- define_transition(   1-1/a, 1/a,   .1,    .9 ) #> No named state -> generating names.  mod <- define_strategy(   transition = mat,   A = define_state(cost = 10),   B = define_state(cost = 2) )  heemod:::eval_strategy(   strategy = mod,   parameters = param,   init = define_init(A = 10, B = 5),   cycles = 5,   method = \"end\",   inflow = define_inflow(A = 0, B = 0),   strategy_name = \"A\",   expand_limit = c(A = 5, B = 5) ) #> $parameters #>   model_time markov_cycle strategy a #> 1          1            1        A 3 #> 2          2            2        A 4 #> 3          3            3        A 5 #> 4          4            4        A 6 #> 5          5            5        A 7 #>  #> $complete_parameters #>   model_time markov_cycle strategy a #> 1          1            1        A 3 #>  #> $transition #> An evaluated transition matrix, 2 states, 5 markov cycles. #>  #> State names: #>  #> A #> B #>  #> [[1]] #>           [,1]      [,2] #> [1,] 0.6666667 0.3333333 #> [2,] 0.1000000 0.9000000 #>  #> [[2]] #>      [,1] [,2] #> [1,] 0.75 0.25 #> [2,] 0.10 0.90 #>  #> [[3]] #>      [,1] [,2] #> [1,]  0.8  0.2 #> [2,]  0.1  0.9 #>  #> [[4]] #>           [,1]      [,2] #> [1,] 0.8333333 0.1666667 #> [2,] 0.1000000 0.9000000 #>  #> [[5]] #>           [,1]      [,2] #> [1,] 0.8571429 0.1428571 #> [2,] 0.1000000 0.9000000 #>  #>  #> $states #> 2 evaluated states, 5 Markov cycles. #>  #> $counts #> # A tibble: 5 × 2 #>       A     B #>   <dbl> <dbl> #> 1  7.17  7.83 #> 2  6.16  8.84 #> 3  5.81  9.19 #> 4  5.76  9.24 #> 5  5.86  9.14 #>  #> $values #>   model_time     cost #> 1          1 87.33333 #> 2          2 79.26667 #> 3          3 76.48667 #> 4          4 76.09022 #> 5          5 76.89688 #>  #> $e_init #>  A  B  #> 10  5  #>  #> $e_inflow #>   A B #> 1 0 0 #> 2 0 0 #> 3 0 0 #> 4 0 0 #> 5 0 0 #>  #> $n_indiv #> [1] 15 #>  #> $cycles #> [1] 5 #>  #> $expand_limit #> A B  #> 5 5  #>  #> attr(,\"class\") #> [1] \"eval_strategy\""},{"path":"https://aphp.github.io/heemod/reference/expand_state.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand Time-Dependent States into Tunnel States — expand_state","title":"Expand Time-Dependent States into Tunnel States — expand_state","text":"function transition matrices state values expands states relying state_time series tunnels states.","code":""},{"path":"https://aphp.github.io/heemod/reference/expand_state.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand Time-Dependent States into Tunnel States — expand_state","text":"","code":"expand_state(x, ...)  # S3 method for uneval_matrix expand_state(x, state_pos, state_name, cycles, n = 1, ...)  # S3 method for uneval_state_list expand_state(x, state_name, cycles, ...)  # S3 method for uneval_inflow expand_state(x, ...)  # S3 method for uneval_init expand_state(x, state_name, cycles, ...)"},{"path":"https://aphp.github.io/heemod/reference/expand_state.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand Time-Dependent States into Tunnel States — expand_state","text":"x transition matrix state list. ... Addition parameters passed methods. state_pos Position state expand. state_name Original name sate expand. cycles Number cycle model. n Position expansion process.","code":""},{"path":"https://aphp.github.io/heemod/reference/expand_state.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand Time-Dependent States into Tunnel States — expand_state","text":"object type input.","code":""},{"path":"https://aphp.github.io/heemod/reference/export_savi.html","id":null,"dir":"Reference","previous_headings":"","what":"Export PSA Results for SAVI — export_savi","title":"Export PSA Results for SAVI — export_savi","text":"Export result PSA format compatible Sheffield Accelerated Value Information software.","code":""},{"path":"https://aphp.github.io/heemod/reference/export_savi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export PSA Results for SAVI — export_savi","text":"","code":"export_savi(x, folder = \".\")"},{"path":"https://aphp.github.io/heemod/reference/export_savi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export PSA Results for SAVI — export_savi","text":"x PSA result. folder folder save csv files.","code":""},{"path":"https://aphp.github.io/heemod/reference/export_savi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export PSA Results for SAVI — export_savi","text":"Nothing. Creates 3 files.","code":""},{"path":"https://aphp.github.io/heemod/reference/export_savi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export PSA Results for SAVI — export_savi","text":"function saves 3 files path given folder: param.csv, parameter values, cost.csv effect.csv cost effect results. official SAVI website can found URL: https://savi.shef.ac.uk/SAVI/","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Evaluated Parameters — extract_params","title":"Extract Evaluated Parameters — extract_params","text":"Extracts covariate-adjusted parameters flexsurv::flexsurvreg() object.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Evaluated Parameters — extract_params","text":"","code":"extract_params(obj, data = NULL)"},{"path":"https://aphp.github.io/heemod/reference/extract_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Evaluated Parameters — extract_params","text":"obj flexsurv::flexsurvreg() object. data optional dataset covariate values generate parameters . Defaults original data model fit.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Evaluated Parameters — extract_params","text":"tidy data frame curve parameters covariate level.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Product-Limit Tables — extract_strata","title":"Extract Product-Limit Tables — extract_strata","text":"Extracts product-limit table survfit object strata. survfit unstratified survfit.coxph objects supported.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Product-Limit Tables — extract_strata","text":"","code":"extract_strata(sf)"},{"path":"https://aphp.github.io/heemod/reference/extract_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Product-Limit Tables — extract_strata","text":"sf survfit object.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Product-Limit Tables — extract_strata","text":"tidy data.frame product-limit tables strata.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_stratum.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Product-Limit Table for a Stratum — extract_stratum","title":"Extract Product-Limit Table for a Stratum — extract_stratum","text":"Extracts product-limit table survfit object given stratum. survival::survfit() objects supported.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_stratum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Product-Limit Table for a Stratum — extract_stratum","text":"","code":"extract_stratum(sf, index)"},{"path":"https://aphp.github.io/heemod/reference/extract_stratum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Product-Limit Table for a Stratum — extract_stratum","text":"sf survfit object. index index number strata extract.","code":""},{"path":"https://aphp.github.io/heemod/reference/extract_stratum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Product-Limit Table for a Stratum — extract_stratum","text":"data frame product-limit table given stratum.","code":""},{"path":"https://aphp.github.io/heemod/reference/file-checkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Check File Type — is_csv","title":"Check File Type — is_csv","text":"Check File Type","code":""},{"path":"https://aphp.github.io/heemod/reference/file-checkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check File Type — is_csv","text":"","code":"is_csv(x)  is_xlsx(x)  is_xls(x)"},{"path":"https://aphp.github.io/heemod/reference/file-checkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check File Type — is_csv","text":"x file name.","code":""},{"path":"https://aphp.github.io/heemod/reference/file-checkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check File Type — is_csv","text":"Whether file (respectively) csv, xlsx, xls.","code":""},{"path":"https://aphp.github.io/heemod/reference/filter_blanks.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Blank Rows From Table — filter_blanks","title":"Remove Blank Rows From Table — filter_blanks","text":"Remove rows values NA.","code":""},{"path":"https://aphp.github.io/heemod/reference/filter_blanks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Blank Rows From Table — filter_blanks","text":"","code":"filter_blanks(x)"},{"path":"https://aphp.github.io/heemod/reference/filter_blanks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Blank Rows From Table — filter_blanks","text":"x data.frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/filter_blanks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Blank Rows From Table — filter_blanks","text":"data.frame without blank rows.","code":""},{"path":"https://aphp.github.io/heemod/reference/filter_blanks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove Blank Rows From Table — filter_blanks","text":"rows can left blanks input table readability, function ensures rows removed.","code":""},{"path":"https://aphp.github.io/heemod/reference/gather_model_info.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather Information for Running a Model From Tabular Data — gather_model_info","title":"Gather Information for Running a Model From Tabular Data — gather_model_info","text":"Gather Information Running Model Tabular Data","code":""},{"path":"https://aphp.github.io/heemod/reference/gather_model_info.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather Information for Running a Model From Tabular Data — gather_model_info","text":"","code":"gather_model_info(base_dir, ref_file)"},{"path":"https://aphp.github.io/heemod/reference/gather_model_info.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather Information for Running a Model From Tabular Data — gather_model_info","text":"base_dir Directory files located. ref_file Name reference file.","code":""},{"path":"https://aphp.github.io/heemod/reference/gather_model_info.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather Information for Running a Model From Tabular Data — gather_model_info","text":"list elements: models (type uneval_model, created create_model_list_from_tabular()) param_info output_dir store output files, specified demographic_file table demographic analysis model_options list model options.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get State Membership Counts — get_counts.updated_model","title":"Get State Membership Counts — get_counts.updated_model","text":"Given result run_model(), return state membership counts specific strategy.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get State Membership Counts — get_counts.updated_model","text":"","code":"# S3 method for updated_model get_counts(x, ...)  # S3 method for combined_model get_counts(x, ...)  get_counts(x, ...)  # S3 method for run_model get_counts(x, ...)  # S3 method for eval_strategy get_counts(x, ...)  # S3 method for list get_counts(x, ...)"},{"path":"https://aphp.github.io/heemod/reference/get_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get State Membership Counts — get_counts.updated_model","text":"x Result run_model(). ... arguments passed methods.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get State Membership Counts — get_counts.updated_model","text":"data frame counts per state.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_counts_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Get count matrix and difference between two cycles — get_counts_diff","title":"Get count matrix and difference between two cycles — get_counts_diff","text":"Get count matrix difference two cycles","code":""},{"path":"https://aphp.github.io/heemod/reference/get_counts_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get count matrix and difference between two cycles — get_counts_diff","text":"","code":"get_counts_diff(x, init, inflow)"},{"path":"https://aphp.github.io/heemod/reference/get_counts_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get count matrix and difference between two cycles — get_counts_diff","text":"x transition matrix init numeric vector, length number model states. Number individuals model state beginning. inflow numeric vector, similar init. Number new individuals state per cycle.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_counts_diff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get count matrix and difference between two cycles — get_counts_diff","text":"length 2 list matrix : count matrix cycle diff matrix showing difference counts two cycles.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_frontier.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Efficiency Frontier — get_frontier","title":"Return Efficiency Frontier — get_frontier","text":"Return Efficiency Frontier","code":""},{"path":"https://aphp.github.io/heemod/reference/get_frontier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Efficiency Frontier — get_frontier","text":"","code":"get_frontier(x)"},{"path":"https://aphp.github.io/heemod/reference/get_frontier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Efficiency Frontier — get_frontier","text":"x eval_strategy_list object.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_frontier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Efficiency Frontier — get_frontier","text":"vector model names efficiency frontier.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_mat_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Get count number — get_mat_total","title":"Get count number — get_mat_total","text":"Get count number","code":""},{"path":"https://aphp.github.io/heemod/reference/get_mat_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get count number — get_mat_total","text":"","code":"get_mat_total(x, init)"},{"path":"https://aphp.github.io/heemod/reference/get_mat_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get count number — get_mat_total","text":"x transition matrix init numeric vector, length number model states. Number individuals model state beginning.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_mat_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get count number — get_mat_total","text":"count matrix","code":""},{"path":"https://aphp.github.io/heemod/reference/get_matrix_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Markov Model Transition Matrix Order — get_matrix_order","title":"Return Markov Model Transition Matrix Order — get_matrix_order","text":"generic works uneval_matrix eval_matrix.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_matrix_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Markov Model Transition Matrix Order — get_matrix_order","text":"","code":"get_matrix_order(x)"},{"path":"https://aphp.github.io/heemod/reference/get_matrix_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Markov Model Transition Matrix Order — get_matrix_order","text":"x transition matrix, evaluated .","code":""},{"path":"https://aphp.github.io/heemod/reference/get_matrix_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Markov Model Transition Matrix Order — get_matrix_order","text":"integer: matrix order.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_matrix_order.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return Markov Model Transition Matrix Order — get_matrix_order","text":"internal use.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_parameter_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Return parameters names — get_parameter_names","title":"Return parameters names — get_parameter_names","text":"Extract parameters names.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_parameter_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return parameters names — get_parameter_names","text":"","code":"get_parameter_names(x)"},{"path":"https://aphp.github.io/heemod/reference/get_parameter_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return parameters names — get_parameter_names","text":"x object parameters.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_parameter_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return parameters names — get_parameter_names","text":"character vector parameter names.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get State Names — get_state_names","title":"Get State Names — get_state_names","text":"Retrieve state names object containing states.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get State Names — get_state_names","text":"","code":"get_state_names(x, ...)"},{"path":"https://aphp.github.io/heemod/reference/get_state_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get State Names — get_state_names","text":"x object containing states. ... Additional arguments passed methods.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get State Names — get_state_names","text":"character vector state names.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_number.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Number of State — get_state_number","title":"Return Number of State — get_state_number","text":"internal use.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_number.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Number of State — get_state_number","text":"","code":"get_state_number(x)"},{"path":"https://aphp.github.io/heemod/reference/get_state_number.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Number of State — get_state_number","text":"x object containing states.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_number.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Number of State — get_state_number","text":"integer: number states.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_number.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return Number of State — get_state_number","text":"Work uneval_states eval_states.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_value_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Return Names of State Values — get_state_value_names","title":"Return Names of State Values — get_state_value_names","text":"Return Names State Values","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_value_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return Names of State Values — get_state_value_names","text":"","code":"get_state_value_names(x)"},{"path":"https://aphp.github.io/heemod/reference/get_state_value_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return Names of State Values — get_state_value_names","text":"x object containing states.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_state_value_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return Names of State Values — get_state_value_names","text":"character vector state value names.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Markov Model Transition Matrix — get_transition","title":"Get Markov Model Transition Matrix — get_transition","text":"Works unevaluated evaluated models.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Markov Model Transition Matrix — get_transition","text":"","code":"get_transition(x)"},{"path":"https://aphp.github.io/heemod/reference/get_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Markov Model Transition Matrix — get_transition","text":"x uneval_model eval_model object.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Markov Model Transition Matrix — get_transition","text":"uneval_matrix uneval_matrix object.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Strategy Values — get_values.updated_model","title":"Get Strategy Values — get_values.updated_model","text":"Given result run_model(), return cost effect values specific strategy.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Strategy Values — get_values.updated_model","text":"","code":"# S3 method for updated_model get_values(x, ...)  # S3 method for combined_model get_values(x, ...)  get_values(x, ...)  # S3 method for run_model get_values(x, ...)  # S3 method for eval_strategy get_values(x, ...)  # S3 method for list get_values(x, ...)"},{"path":"https://aphp.github.io/heemod/reference/get_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Strategy Values — get_values.updated_model","text":"x Result run_model(). ... arguments passed methods.","code":""},{"path":"https://aphp.github.io/heemod/reference/get_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Strategy Values — get_values.updated_model","text":"data frame values per state.","code":""},{"path":"https://aphp.github.io/heemod/reference/heemod-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Markov Models for Health Economic Evaluations — heemod-package","title":"Markov Models for Health Economic Evaluations — heemod-package","text":"implementation modelling reporting features described reference textbooks guidelines: deterministic probabilistic sensitivity analysis, heterogeneity analysis, time dependency state-time model-time (semi-Markov non-homogeneous Markov models), etc.","code":""},{"path":[]},{"path":"https://aphp.github.io/heemod/reference/heemod-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Markov Models for Health Economic Evaluations — heemod-package","text":"Maintainer: Kevin Zarca kevin.zarca@gmail.com Authors: Antoine Filipovic-Pierucci contributors: Matthew Wiener [contributor] Zdenek Kabat [contributor] Vojtech Filipec [contributor] Jordan Amdahl [contributor] Yonatan Carranza Alarcon [contributor] Vince Daniels [contributor]","code":""},{"path":"https://aphp.github.io/heemod/reference/heemod_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Cost and Effect — scale.combined_model","title":"Normalize Cost and Effect — scale.combined_model","text":"Normalize cost effect values taking base model reference.","code":""},{"path":"https://aphp.github.io/heemod/reference/heemod_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Cost and Effect — scale.combined_model","text":"","code":"# S3 method for combined_model scale(x, center = TRUE, scale = TRUE)  # S3 method for psa scale(x, center = TRUE, scale = TRUE)  # S3 method for run_model scale(x, center = TRUE, scale = TRUE)  # S3 method for dsa scale(x, center = TRUE, scale = TRUE)"},{"path":"https://aphp.github.io/heemod/reference/heemod_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Cost and Effect — scale.combined_model","text":"x Result run_model() run_psa(). center Center results around base model? scale Scale results individual values?","code":""},{"path":"https://aphp.github.io/heemod/reference/heemod_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Cost and Effect — scale.combined_model","text":"Input normalized .cost .effect, ordered .effect.","code":""},{"path":"https://aphp.github.io/heemod/reference/insert.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert Elements in Vector — insert","title":"Insert Elements in Vector — insert","text":"Insert vector another vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/insert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert Elements in Vector — insert","text":"","code":"insert(x, pos, what)"},{"path":"https://aphp.github.io/heemod/reference/insert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert Elements in Vector — insert","text":"x vector (list). pos Integer. Insert elements? Vector elements insert.","code":""},{"path":"https://aphp.github.io/heemod/reference/insert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert Elements in Vector — insert","text":"vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/insert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert Elements in Vector — insert","text":"insert element beginning use pos value 0. Duplicated positions allowed.","code":""},{"path":"https://aphp.github.io/heemod/reference/insert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert Elements in Vector — insert","text":"","code":"heemod:::insert(letters, c(0, 5, 26), c(\"xxx\", \"yyy\")) #>  [1] \"xxx\" \"yyy\" \"a\"   \"b\"   \"c\"   \"d\"   \"e\"   \"xxx\" \"yyy\" \"f\"   \"g\"   \"h\"   #> [13] \"i\"   \"j\"   \"k\"   \"l\"   \"m\"   \"n\"   \"o\"   \"p\"   \"q\"   \"r\"   \"s\"   \"t\"   #> [25] \"u\"   \"v\"   \"w\"   \"x\"   \"y\"   \"z\"   \"xxx\" \"yyy\""},{"path":"https://aphp.github.io/heemod/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolate Quosures — interpolate","title":"Interpolate Quosures — interpolate","text":"Sequentially interpolates quosures, optionally using external references.","code":""},{"path":"https://aphp.github.io/heemod/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolate Quosures — interpolate","text":"","code":"interpolate(x, ...)  # S3 method for default interpolate(x, more = NULL, ...)  # S3 method for uneval_matrix interpolate(x, ...)  # S3 method for state interpolate(x, ...)  # S3 method for part_surv interpolate(x, ...)  # S3 method for uneval_state_list interpolate(x, ...)"},{"path":"https://aphp.github.io/heemod/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolate Quosures — interpolate","text":"x parameter, transition matrix state list object. ... Addition parameters passed methods. list expressions.","code":""},{"path":"https://aphp.github.io/heemod/reference/interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolate Quosures — interpolate","text":"interpolated quosures object.","code":""},{"path":"https://aphp.github.io/heemod/reference/interpolate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Interpolate Quosures — interpolate","text":"interpolation sequential: second dot interpolated using first, third using interpolated first two, .","code":""},{"path":"https://aphp.github.io/heemod/reference/is.wholenumber.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whole Numbers — is.wholenumber","title":"Check whole Numbers — is.wholenumber","text":"Check whole Numbers","code":""},{"path":"https://aphp.github.io/heemod/reference/is.wholenumber.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whole Numbers — is.wholenumber","text":"","code":"is.wholenumber(x, tol = .Machine$double.eps^0.5)"},{"path":"https://aphp.github.io/heemod/reference/is.wholenumber.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whole Numbers — is.wholenumber","text":"x numeric. tol smallest positive floating-point number x 1 + x != 1.","code":""},{"path":"https://aphp.github.io/heemod/reference/is.wholenumber.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whole Numbers — is.wholenumber","text":"logical scalar.","code":""},{"path":"https://aphp.github.io/heemod/reference/join.html","id":null,"dir":"Reference","previous_headings":"","what":"Project Beyond a Survival Distribution with Another — join","title":"Project Beyond a Survival Distribution with Another — join","text":"Project survival survival distribution using one survival distributions using specified cut points.","code":""},{"path":"https://aphp.github.io/heemod/reference/join.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project Beyond a Survival Distribution with Another — join","text":"","code":"join(..., at)  join_(dots, at)"},{"path":"https://aphp.github.io/heemod/reference/join.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project Beyond a Survival Distribution with Another — join","text":"... Survival distributions used projection. vector times corresponding cut point(s) used. dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/join.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project Beyond a Survival Distribution with Another — join","text":"surv_projection object.","code":""},{"path":"https://aphp.github.io/heemod/reference/join.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Project Beyond a Survival Distribution with Another — join","text":"","code":"dist1 <- define_surv_dist(distribution = \"exp\", rate = .5) dist2 <- define_surv_dist(distribution = \"gompertz\", rate = .5, shape = 1) join_dist <- join(dist1, dist2, at=20)"},{"path":"https://aphp.github.io/heemod/reference/list_all_same.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if All the Elements of a List Are the Same — list_all_same","title":"Check if All the Elements of a List Are the Same — list_all_same","text":"Check Elements List ","code":""},{"path":"https://aphp.github.io/heemod/reference/list_all_same.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if All the Elements of a List Are the Same — list_all_same","text":"","code":"list_all_same(x)"},{"path":"https://aphp.github.io/heemod/reference/list_all_same.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if All the Elements of a List Are the Same — list_all_same","text":"x list.","code":""},{"path":"https://aphp.github.io/heemod/reference/list_all_same.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if All the Elements of a List Are the Same — list_all_same","text":"logical scalar.","code":""},{"path":"https://aphp.github.io/heemod/reference/load_surv_models.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a set of survival fits — load_surv_models","title":"Load a set of survival fits — load_surv_models","text":"Load set survival fits","code":""},{"path":"https://aphp.github.io/heemod/reference/load_surv_models.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a set of survival fits — load_surv_models","text":"","code":"load_surv_models(location, survival_specs, use_envir)"},{"path":"https://aphp.github.io/heemod/reference/load_surv_models.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a set of survival fits — load_surv_models","text":"location base directory survival_specs information fits use_envir environment","code":""},{"path":"https://aphp.github.io/heemod/reference/load_surv_models.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a set of survival fits — load_surv_models","text":"list two elements: best_models, list fits data file passed ; envir, environment containing models can referenced get probabilities.","code":""},{"path":"https://aphp.github.io/heemod/reference/look_up.html","id":null,"dir":"Reference","previous_headings":"","what":"Look Up Values in a Data Frame — look_up","title":"Look Up Values in a Data Frame — look_up","text":"convenience function easily look values data frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/look_up.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Look Up Values in a Data Frame — look_up","text":"","code":"look_up(data, ..., bin = FALSE, value = \"value\")"},{"path":"https://aphp.github.io/heemod/reference/look_up.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Look Up Values in a Data Frame — look_up","text":"data reference data frame. ... Individual characteristics, named like columns data. bin Either logical: numeric variable binned, character vector giving names variables bin (see examples). value value extract reference data frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/look_up.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Look Up Values in a Data Frame — look_up","text":"vector values, length ....","code":""},{"path":"https://aphp.github.io/heemod/reference/look_up.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Look Up Values in a Data Frame — look_up","text":"function mostly used extract population informations (mortality rates), given individual characteristics. binning activated, numeric individual characteristics matched corresponding reference value directly inferior.","code":""},{"path":"https://aphp.github.io/heemod/reference/look_up.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Look Up Values in a Data Frame — look_up","text":"","code":"tempdf <- expand.grid(arg1 = c(\"A\", \"B\", \"C\"), arg2 = 1:4, arg3 = 1:5) tempdf$value <- 1:60  look_up(   data = tempdf,   value = \"value\",   arg1 = c(\"A\", \"B\", \"C\", \"B\", \"A\"),   arg2 = c(1, 1, 3.2, 3.0, 5),    arg3 = c(-1, 1, 1, 2, 3) ) #> Warning: Some values were not found, returning missing data: #> arguments to look_up: #> arg1 : A, C, A #> arg2 : 1, 3.2, 5 #> arg3 : -1, 1, 3 #> [1] NA  2 NA 20 NA  # binning doesnt catch values lesser than the smaller # reference value look_up(   data = tempdf,   value = \"value\",   arg1 = c(\"A\", \"B\", \"C\", \"B\", \"A\"),   arg2 = c(1, 1, 3.2, 3.0, 5),    arg3 = c(-1, 1, 1, 2, 3),   bin = TRUE ) #> Warning: Some values were not found, returning missing data: #> arguments to look_up: #> arg1 : A #> arg2 : [1,2) #> arg3 : NA #> [1] NA  2  9 20 34 # bin can alos be given as a charater vector # to avoid binning all numeric variables look_up(   data = tempdf,   value = \"value\",   arg1 = c(\"A\", \"B\", \"C\", \"B\", \"A\"),   arg2 = c(1, 1, 3.2, 3.0, 5),    arg3 = c(-1, 1, 1, 2, 3),   bin = c(\"arg2\") ) #> Warning: Some values were not found, returning missing data: #> arguments to look_up: #> arg1 : A #> arg2 : [1,2) #> arg3 : -1 #> [1] NA  2  9 20 34  age_related_df <- data.frame(age = 10 * 0:9, decade = 1:10)  look_up(age_related_df, age = c(0, 10, 20), value = \"decade\") #> [1] 1 2 3  # binning might help in the situation look_up(age_related_df, age = c(5, 15, 23.5),          value = \"decade\") #> Warning: Some values were not found, returning missing data: #> arguments to look_up: #> age : 5, 15, 23.5 #> [1] NA NA NA look_up(age_related_df, age = c(5, 15, 23.5),          value = \"decade\", bin = TRUE) #> [1] 1 2 3"},{"path":"https://aphp.github.io/heemod/reference/make_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Syntactically Valid Names — make_names","title":"Make Syntactically Valid Names — make_names","text":"Compared make.names() function also converts characters lower case replaces . _.","code":""},{"path":"https://aphp.github.io/heemod/reference/make_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Syntactically Valid Names — make_names","text":"","code":"make_names(x)"},{"path":"https://aphp.github.io/heemod/reference/make_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Syntactically Valid Names — make_names","text":"x character vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/make_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Syntactically Valid Names — make_names","text":"character vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/mix.html","id":null,"dir":"Reference","previous_headings":"","what":"Mix Two or More Survival Distributions — mix","title":"Mix Two or More Survival Distributions — mix","text":"Mix set survival distributions using specified weights.","code":""},{"path":"https://aphp.github.io/heemod/reference/mix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mix Two or More Survival Distributions — mix","text":"","code":"mix(..., weights = 1)  mix_(dots, weights = 1)"},{"path":"https://aphp.github.io/heemod/reference/mix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mix Two or More Survival Distributions — mix","text":"... Survival distributions used projection. weights vector weights used pooling. dots Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/mix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mix Two or More Survival Distributions — mix","text":"surv_pooled object.","code":""},{"path":"https://aphp.github.io/heemod/reference/mix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mix Two or More Survival Distributions — mix","text":"","code":"dist1 <- define_surv_dist(distribution = \"exp\", rate = .5) dist2 <- define_surv_dist(distribution = \"gompertz\", rate = .5, shape = 1) pooled_dist <- mix(dist1, dist2, weights = c(0.25, 0.75))"},{"path":"https://aphp.github.io/heemod/reference/modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify Object — modify","title":"Modify Object — modify","text":"generic function allows modification various objects parameters, transitions matrix states.","code":""},{"path":"https://aphp.github.io/heemod/reference/modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify Object — modify","text":"","code":"modify(.OBJECT, ...)"},{"path":"https://aphp.github.io/heemod/reference/modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify Object — modify","text":".OBJECT Various objects. ... Modifications.","code":""},{"path":"https://aphp.github.io/heemod/reference/modify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify Object — modify","text":"class x.","code":""},{"path":"https://aphp.github.io/heemod/reference/modify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify Object — modify","text":"details available respective help page object definition.","code":""},{"path":"https://aphp.github.io/heemod/reference/parse_multi_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify Inputs for Multiple Models From a Single File — parse_multi_spec","title":"Specify Inputs for Multiple Models From a Single File — parse_multi_spec","text":"Parse data.frame containing specifications multiple models list inputs required model.","code":""},{"path":"https://aphp.github.io/heemod/reference/parse_multi_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify Inputs for Multiple Models From a Single File — parse_multi_spec","text":"","code":"parse_multi_spec(multi_spec, split_on = \".model\", group_vars)"},{"path":"https://aphp.github.io/heemod/reference/parse_multi_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify Inputs for Multiple Models From a Single File — parse_multi_spec","text":"multi_spec data frame. split_on character length 1, name variable multi_spec split . group_vars character, one variable names multi_spec identify line information.","code":""},{"path":"https://aphp.github.io/heemod/reference/parse_multi_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify Inputs for Multiple Models From a Single File — parse_multi_spec","text":"list data frames, one value split_on.","code":""},{"path":"https://aphp.github.io/heemod/reference/parse_multi_spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify Inputs for Multiple Models From a Single File — parse_multi_spec","text":"combination values columns specified group_vars either unique file (case replicated values split_on), must repeated many times unique values split_on. split_on usually model name. group_var can state names, lines matrix definition...","code":""},{"path":"https://aphp.github.io/heemod/reference/part_survs_from_surv_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert saved fits to partitioned survival objects — part_survs_from_surv_inputs","title":"Convert saved fits to partitioned survival objects — part_survs_from_surv_inputs","text":"Convert saved fits partitioned survival objects","code":""},{"path":"https://aphp.github.io/heemod/reference/part_survs_from_surv_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert saved fits to partitioned survival objects — part_survs_from_surv_inputs","text":"","code":"part_survs_from_surv_inputs(surv_inputs, state_names)"},{"path":"https://aphp.github.io/heemod/reference/part_survs_from_surv_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert saved fits to partitioned survival objects — part_survs_from_surv_inputs","text":"surv_inputs list matrices flexsurvreg objects, example first element output survival_from_data. state_names names states model","code":""},{"path":"https://aphp.github.io/heemod/reference/part_survs_from_surv_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert saved fits to partitioned survival objects — part_survs_from_surv_inputs","text":"tibble partitioned survival objects, similar original tibble survival fits, columns except type fit, new column part_surv.","code":""},{"path":"https://aphp.github.io/heemod/reference/part_survs_from_surv_inputs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert saved fits to partitioned survival objects — part_survs_from_surv_inputs","text":"surv_inputs tibble columns type (PFS OS, case sensitive), treatment, set_name (data subsets), dist (survival distribution assumptions), fit (fitted survival object) set_def (subset data defined, just keep around)","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.dsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Sensitivity Analysis — plot.dsa","title":"Plot Sensitivity Analysis — plot.dsa","text":"Plot results sensitivity analysis tornado plot.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.dsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Sensitivity Analysis — plot.dsa","text":"","code":"# S3 method for dsa plot(   x,   type = c(\"simple\", \"difference\"),   result = c(\"cost\", \"effect\", \"icer\"),   strategy = NULL,   widest_on_top = TRUE,   limits_by_bars = TRUE,   resolve_labels = FALSE,   shorten_labels = FALSE,   remove_ns = FALSE,   bw = FALSE,   ... )"},{"path":"https://aphp.github.io/heemod/reference/plot.dsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Sensitivity Analysis — plot.dsa","text":"x result run_dsa(). type Type plot (see details). result Plot cost, effect, ICER. strategy Name index strategies plot. widest_on_top logical. bars sorted widest top? limits_by_bars logical. limits used parameter printed plot, next bars? resolve_labels logical. resolve labels numbers instead expressions ()? shorten_labels logical. shorten presentation parameters plot highlight values differ? remove_ns Remove variables sensitive. bw Black & white plot publications? ... Additional arguments passed plot.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.dsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Sensitivity Analysis — plot.dsa","text":"ggplot2 object.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.dsa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Sensitivity Analysis — plot.dsa","text":"Plot type simple plots variations single strategy values, difference plots incremental values.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.psa.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Results of Probabilistic Analysis — plot.psa","title":"Plot Results of Probabilistic Analysis — plot.psa","text":"Various plots Markov models probabilistic analysis.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.psa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Results of Probabilistic Analysis — plot.psa","text":"","code":"# S3 method for psa plot(   x,   type = c(\"ce\", \"ac\", \"cov\", \"evpi\"),   max_wtp = 1e+05,   n = 100,   log_scale = TRUE,   diff = FALSE,   threshold,   bw = FALSE,   ... )"},{"path":"https://aphp.github.io/heemod/reference/plot.psa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Results of Probabilistic Analysis — plot.psa","text":"x Result run_model(). type Type plot, see details. max_wtp Maximal willingness pay. n Number CECA points estimate (values 100 may take significant time). log_scale Show willingness pay log scale? diff Logical, perform covariance analysis strategy differences? threshold diff = TRUE, threshold value net monetary benefit computation. bw Black & white plot publications? ... Additional arguments, depends type.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.psa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Results of Probabilistic Analysis — plot.psa","text":"ggplot2 object.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.psa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Results of Probabilistic Analysis — plot.psa","text":"type = \"ac\" plots cost-effectiveness acceptability curves, type = \"ce\" plots results cost-efficiency plane, type = \"cov\" perform covariance analysis results, type = \"evpi\" expected value perfect information.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.run_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Results of a Markov Model — plot.run_model","title":"Plot Results of a Markov Model — plot.run_model","text":"Various plots Markov models.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.run_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Results of a Markov Model — plot.run_model","text":"","code":"# S3 method for run_model plot(   x,   type = c(\"counts\", \"ce\", \"values\"),   panels = c(\"by_strategy\", \"by_state\", \"by_value\"),   values = NULL,   strategy = NULL,   states = NULL,   free_y = FALSE,   bw = FALSE,   ... )"},{"path":"https://aphp.github.io/heemod/reference/plot.run_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Results of a Markov Model — plot.run_model","text":"x Result run_model(). type Type plot, see details. panels plots faceted model, value state? values Names values plotted. can costs effects defined states. strategy Name position model(s) interest. states Names states included plot. free_y y limits free panels? bw Black & white plot publications? ... Additional arguments passed plot. type = \"counts\" represents state memberships (corrected) cycle, type = \"ce\" plots models cost-efficiency plane efficiency frontier, type = \"values\" state values per cycle. states specified, states turned factor ordering given variable, plotting order can controlled.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.run_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Results of a Markov Model — plot.run_model","text":"ggplot2 object.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.run_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Results of a Markov Model — plot.run_model","text":"","code":"## These examples require \\code{res_mod} from the hip replacement model discussed in ## `vignette(\"non-homogeneous\", package = \"heemod\")`.  if (FALSE) {   plot(res_mod)    plot(res_mod, model = \"all\")   plot(res_mod, model = \"all\", panels = \"by_state\")    plot(res_mod, model = \"all\", include_states = c(\"RevisionTHR\", \"SuccessR\"))   plot(res_mod, model = \"all\", panels = \"by_state\", include_states = c(\"RevisionTHR\", \"SuccessR\"))     plot(res_mod, model = 2, panel = \"by_state\", include_states = c(\"RevisionTHR\", \"SuccessR\"))    }"},{"path":"https://aphp.github.io/heemod/reference/plot.surv_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot general survival models — plot.surv_object","title":"Plot general survival models — plot.surv_object","text":"Plot general survival models","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.surv_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot general survival models — plot.surv_object","text":"","code":"# S3 method for surv_object plot(   x,   times = seq.int(0, 30),   type = c(\"surv\", \"prob\"),   psa,   Nrep = 100,   join_opts = list(join_col = \"red\", join_pch = 20, join_size = 3),   ... )"},{"path":"https://aphp.github.io/heemod/reference/plot.surv_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot general survival models — plot.surv_object","text":"x survival object class surv_aft, surv_add_haz, surv_ph, surv_po, surv_model, surv_pooled, surv_projection. times Times evaluate plot survival object. type either surv (default) prob, depending whether want plot survival start conditional probabilities. psa define_psa object Nrep number replications estimate variability x join_opts list 3 graphical parameters points different survival functions joined: join_col, join_pch join_size. ... additional arguments pass compute_surv functions.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.surv_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot general survival models — plot.surv_object","text":"ggplot2::ggplot() object.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.surv_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot general survival models — plot.surv_object","text":"function currently highlights join points top level; , objects class surv_projection. avoid plotting join points, set join_size negative number.","code":""},{"path":"https://aphp.github.io/heemod/reference/plot.surv_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot general survival models — plot.surv_object","text":"","code":"## Evaluation of the variability of the survival distribution # \\donttest{ surv1 <- define_surv_dist(\"exp\", rate = 0.1) psa <- define_psa(surv1 ~ resample_surv(n = 100)) plot(surv1, psa=psa) #> Error in eval(rhs, envir = getOption(\"heemod.env\")): object 'surv1' not found  ## plot surv_projection object surv2 <- define_surv_dist(\"exp\", rate = 0.5) plot(join(surv1, surv2, at = 2), psa = psa, Nrep = 50)   ## surv_fit object library(survival) km <- define_surv_fit(survfit(formula = Surv(time, status) ~ 1, data = aml)) fs <- flexsurv::flexsurvreg(formula = Surv(time, status) ~ 1,                          data = aml,                          dist = \"weibull\") |>   define_surv_fit()  psa2 <- define_psa(km ~ resample_surv(),                    fs ~ resample_surv(),                    surv1 ~ resample_surv(100)) plot(km, psa = psa2) #> No covariates provided, returning aggregate survival across all subjects. #> Error in eval(rhs, envir = getOption(\"heemod.env\")): object 'km' not found  plot(join(km, surv1, at = 6), psa = psa2) #> No covariates provided, returning aggregate survival across all subjects. #> No covariates provided, returning aggregate survival across all subjects. #> Error in eval(rhs, envir = getOption(\"heemod.env\")): object 'fs' not found plot(join(fs, surv1, at = 6), psa = psa2)  # }"},{"path":"https://aphp.github.io/heemod/reference/plur.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns ","title":"Returns ","text":"Returns \"s\" x > 1","code":""},{"path":"https://aphp.github.io/heemod/reference/plur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns ","text":"","code":"plur(x)  plur_y(x)"},{"path":"https://aphp.github.io/heemod/reference/plur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns ","text":"x integer.","code":""},{"path":"https://aphp.github.io/heemod/reference/plur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns ","text":"\"s\" \"\".","code":""},{"path":"https://aphp.github.io/heemod/reference/probability.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience Functions to Compute Probabilities — probability","title":"Convenience Functions to Compute Probabilities — probability","text":"convenience functions make easier compute transition probabilities incidence rates, , RR, probabilities estimated different timeframe.","code":""},{"path":"https://aphp.github.io/heemod/reference/probability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience Functions to Compute Probabilities — probability","text":"","code":"rescale_prob(p, to = 1, from = 1)  prob_to_prob(...)  rate_to_prob(r, to = 1, per = 1)  or_to_prob(or, p)  rr_to_prob(rr, p)"},{"path":"https://aphp.github.io/heemod/reference/probability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience Functions to Compute Probabilities — probability","text":"p Probability. Compute probability timeframe. Timeframe original probability. ... deprecated functions. r Rate. per Number person-time corresponding rate. Odds ratio. rr Relative risk.","code":""},{"path":"https://aphp.github.io/heemod/reference/probability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience Functions to Compute Probabilities — probability","text":"probability.","code":""},{"path":"https://aphp.github.io/heemod/reference/probability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience Functions to Compute Probabilities — probability","text":"","code":"# convert 5-year probability  # to 1-year probability rescale_prob(p = .65, from = 5) #> [1] 0.1893869  # convert 1-year probability  # to 1-month probability rescale_prob(p = .5, to = 1/12) #> [1] 0.05612569  # convert rate per 1000 PY # to 5-year probability rate_to_prob(r = 162, per = 1000, to = 5) #> [1] 0.5551419  # convert OR to probability or_to_prob(or = 1.9, p = .51) #> [1] 0.6641535  # convert RR to probability rr_to_prob(rr = 1.9, p = .51) #> [1] 0.969"},{"path":"https://aphp.github.io/heemod/reference/project_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Project Beyond a Survival Distribution with Another\n(pairwise) — project_fn","title":"Project Beyond a Survival Distribution with Another\n(pairwise) — project_fn","text":"Project survival survival distribution using another survival distribution specified cutpoint. Used project reduce list distributions.","code":""},{"path":"https://aphp.github.io/heemod/reference/project_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Project Beyond a Survival Distribution with Another\n(pairwise) — project_fn","text":"","code":"project_fn(dist1, dist2_list)"},{"path":"https://aphp.github.io/heemod/reference/project_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Project Beyond a Survival Distribution with Another\n(pairwise) — project_fn","text":"dist1 Survival distribution project . dist2_list list containing distribution project time projection begins.","code":""},{"path":"https://aphp.github.io/heemod/reference/project_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Project Beyond a Survival Distribution with Another\n(pairwise) — project_fn","text":"surv_projection object.","code":""},{"path":"https://aphp.github.io/heemod/reference/read_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the accepted file formats for tabular input — read_file","title":"Read the accepted file formats for tabular input — read_file","text":"Columns starting '.comment' ignored.","code":""},{"path":"https://aphp.github.io/heemod/reference/read_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the accepted file formats for tabular input — read_file","text":"","code":"read_file(file_name)"},{"path":"https://aphp.github.io/heemod/reference/read_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the accepted file formats for tabular input — read_file","text":"file_name File name.","code":""},{"path":"https://aphp.github.io/heemod/reference/read_file.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the accepted file formats for tabular input — read_file","text":"data.frame.","code":""},{"path":"https://aphp.github.io/heemod/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>%","code":""},{"path":"https://aphp.github.io/heemod/reference/reindent_transition.html","id":null,"dir":"Reference","previous_headings":"","what":"Reindent Transition Matrix — reindent_transition","title":"Reindent Transition Matrix — reindent_transition","text":"Reindent Transition Matrix","code":""},{"path":"https://aphp.github.io/heemod/reference/reindent_transition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reindent Transition Matrix — reindent_transition","text":"","code":"reindent_transition(x, print = TRUE)"},{"path":"https://aphp.github.io/heemod/reference/reindent_transition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reindent Transition Matrix — reindent_transition","text":"x transition matrix. print Print result?","code":""},{"path":"https://aphp.github.io/heemod/reference/reindent_transition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reindent Transition Matrix — reindent_transition","text":"reindented matrix text string, invisibly.","code":""},{"path":"https://aphp.github.io/heemod/reference/resample_surv.html","id":null,"dir":"Reference","previous_headings":"","what":"Resample survival distribution — resample_surv","title":"Resample survival distribution — resample_surv","text":"Resample survival distribution","code":""},{"path":"https://aphp.github.io/heemod/reference/resample_surv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resample survival distribution — resample_surv","text":"","code":"resample_surv(n)  resample_surv_boot(x)  resample_surv_dist(x, n)  r_resample_surv_dist(distribution, type, args)  r_boot_survfit(x)"},{"path":"https://aphp.github.io/heemod/reference/resample_surv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resample survival distribution — resample_surv","text":"n number observations generate dist specified x surv_dist object lower n , higher variability x surv_object","code":""},{"path":"https://aphp.github.io/heemod/reference/rescale_discount_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale Discount Rate — rescale_discount_rate","title":"Rescale Discount Rate — rescale_discount_rate","text":"Rescale discount rate two time frames.","code":""},{"path":"https://aphp.github.io/heemod/reference/rescale_discount_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale Discount Rate — rescale_discount_rate","text":"","code":"rescale_discount_rate(x, from, to)"},{"path":"https://aphp.github.io/heemod/reference/rescale_discount_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale Discount Rate — rescale_discount_rate","text":"x Discount rate rescale. Original time period. Final time period.","code":""},{"path":"https://aphp.github.io/heemod/reference/rescale_discount_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale Discount Rate — rescale_discount_rate","text":"Rate rescaled assumption compound discounting.","code":""},{"path":"https://aphp.github.io/heemod/reference/rescale_discount_rate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rescale Discount Rate — rescale_discount_rate","text":"Continuous discounting assumed, .e. converting long-term discount rate short-term rate, assume partial gain one short term multiplicatively discounted following short terms. time, assume short-term rate time-invariant.","code":""},{"path":"https://aphp.github.io/heemod/reference/rescale_discount_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale Discount Rate — rescale_discount_rate","text":"","code":"## 1% monthly interest rate to annual   rescale_discount_rate(0.01, 1, 12) #> [1] 0.126825   ## 3% annual discount rate to (approximately) weekly    rescale_discount_rate(0.03, 52, 1) #> [1] 0.0005686001"},{"path":"https://aphp.github.io/heemod/reference/run_bcea.html","id":null,"dir":"Reference","previous_headings":"","what":"Use the BCEA package — run_bcea","title":"Use the BCEA package — run_bcea","text":"Interfaces output run_psa() BCEA package.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_bcea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use the BCEA package — run_bcea","text":"","code":"run_bcea(x, ...)"},{"path":"https://aphp.github.io/heemod/reference/run_bcea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use the BCEA package — run_bcea","text":"x Output run_psa(). ... Additional arguments passed BCEA::bcea().","code":""},{"path":"https://aphp.github.io/heemod/reference/run_bcea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use the BCEA package — run_bcea","text":"BCEA analysis.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_bcea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use the BCEA package — run_bcea","text":"BCEA package needed function work.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_dsa.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Sensitivity Analysis — run_dsa","title":"Run Sensitivity Analysis — run_dsa","text":"Run Sensitivity Analysis","code":""},{"path":"https://aphp.github.io/heemod/reference/run_dsa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Sensitivity Analysis — run_dsa","text":"","code":"run_dsa(model, dsa)"},{"path":"https://aphp.github.io/heemod/reference/run_dsa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Sensitivity Analysis — run_dsa","text":"model evaluated Markov model. dsa object returned define_dsa().","code":""},{"path":"https://aphp.github.io/heemod/reference/run_dsa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Sensitivity Analysis — run_dsa","text":"data.frame one row per model parameter value.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_dsa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Sensitivity Analysis — run_dsa","text":"","code":"param <- define_parameters(   p1 = .5,   p2 = .2,   r = .05 ) mod1 <- define_strategy(   transition = define_transition(     C, p1,     p2, C   ),   define_state(     cost = discount(543, r),     ly = 1   ),   define_state(     cost = discount(432, r),     ly = .5   ) ) #> No named state -> generating names. #> No named state -> generating names.  mod2 <- define_strategy(   transition = define_transition(     C, p1,     p2, C   ),   define_state(     cost = 789,     ly = 1   ),   define_state(     cost = 456,     ly = .8   ) ) #> No named state -> generating names. #> No named state -> generating names.  res2 <- run_model(   mod1, mod2,   parameters = param,   init = c(100, 0),   cycles = 10,   cost = cost,   effect = ly ) #> No named model -> generating names.  ds <- define_dsa(   p1, .1, .9,   p2, .1, .3,   r, .05, .1 ) print(ds) #>    Low  High #> p1 0.1  0.9  #> p2 0.1  0.3  #> r  0.05 0.1     #'\\dontrun{ #'x <- run_dsa(res2, ds) #'plot(x, value = \"cost\") #'} #' #' # can be specified as a function of other parameters   ds2 <- define_dsa(   p2, p1 - .1, p1 + .1 )  #'\\dontrun{ #'run_dsa(res2, ds2) #'}"},{"path":"https://aphp.github.io/heemod/reference/run_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Markov Model — run_model","title":"Run Markov Model — run_model","text":"Runs one strategy. one strategy provided, strategies states state value names.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Markov Model — run_model","text":"","code":"run_model(   ...,   parameters = define_parameters(),   init = c(1000L, rep(0L, get_state_number(get_states(list(...)[[1]])) - 1)),   cycles = 1,   method = c(\"life-table\", \"beginning\", \"end\"),   cost = NULL,   effect = NULL,   state_time_limit = NULL,   central_strategy = NULL,   inflow = rep(0L, get_state_number(get_states(list(...)[[1]]))) )  run_model_(   uneval_strategy_list,   parameters,   init,   cycles,   method,   cost,   effect,   state_time_limit,   central_strategy,   inflow )"},{"path":"https://aphp.github.io/heemod/reference/run_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Markov Model — run_model","text":"... One uneval_model object. parameters Optional. object generated define_parameters(). init numeric vector result define_init(), length number states. Number individuals state beginning. cycles positive integer. Number Markov Cycles compute. method Counting method. See details. cost Names expression compute cost cost-effectiveness plane. effect Names expression compute effect cost-effectiveness plane. state_time_limit Optional expansion limit state_time, see details. central_strategy character. name strategy center cost-effectiveness plane, readability. inflow numeric vector result define_inflow(), similar init. Number new individuals state per cycle. uneval_strategy_list List models, used run_model_() avoid using ....","code":""},{"path":"https://aphp.github.io/heemod/reference/run_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Markov Model — run_model","text":"list evaluated models computed values.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Markov Model — run_model","text":"order compute comparisons strategies must similar (states state value names). Thus strategies can differ transition matrix cell values values attached states (state value names). initial number individuals state number cycle strategies state_time_limit can specified 3 different ways: single value: limit applied states strategies. 2. named vector (names state names): limits applied given state names, strategies. 3. named list named vectors: limits applied given state names given strategies. Counting method represents transition occur, based https://journals.sagepub.com/doi/10.1177/0272989X09340585: \"beginning\" overestimates costs \"end\" underestimates costs.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Markov Model — run_model","text":"","code":"# running a single model  mod1 <-   define_strategy(     transition = define_transition(       .5, .5,       .1, .9     ),     define_state(       cost = 543,       ly = 1     ),     define_state(       cost = 432,       ly = 1     )   ) #> No named state -> generating names. #> No named state -> generating names.   res <- run_model(   mod1,   init = c(100, 0),   cycles = 2,   cost = cost,   effect = ly ) #> No named model -> generating names.  # running several models mod2 <-   define_strategy(     transition = define_transition(       .5, .5,       .1, .9     ),     define_state(       cost = 789,       ly = 1     ),     define_state(       cost = 456,       ly = 1     )        ) #> No named state -> generating names. #> No named state -> generating names.   res2 <- run_model(   mod1, mod2,   init = c(100, 0),   cycles = 10,   cost = cost,   effect = ly ) #> No named model -> generating names."},{"path":"https://aphp.github.io/heemod/reference/run_model_tabular.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Analyses From Files — run_model_tabular","title":"Run Analyses From Files — run_model_tabular","text":"function runs model tabular input.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_model_tabular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Analyses From Files — run_model_tabular","text":"","code":"run_model_tabular(   location,   reference = \"REFERENCE.csv\",   run_dsa = TRUE,   run_psa = TRUE,   run_demo = TRUE,   save = FALSE,   overwrite = FALSE )"},{"path":"https://aphp.github.io/heemod/reference/run_model_tabular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Analyses From Files — run_model_tabular","text":"location Directory files located. reference Name reference file. run_dsa Run DSA? run_psa Run PSA?. run_demo Run demographic analysis? save outputs saved? overwrite outputs overwritten?","code":""},{"path":"https://aphp.github.io/heemod/reference/run_model_tabular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Analyses From Files — run_model_tabular","text":"list evaluated models (always), , appropriate input provided, dsa (deterministic sensitivity analysis), psa (probabilistic sensitivity analysis) demographics (results across different demographic groups).","code":""},{"path":"https://aphp.github.io/heemod/reference/run_model_tabular.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Analyses From Files — run_model_tabular","text":"reference file two columns. data can added, value TRUE absolute file path provided. data values must include state, tm, parameters, can also include options, demographics data.  corresponding values file column give names files (located base_dir) contain corresponding information - , case data, directory containing tables loaded.","code":""},{"path":"https://aphp.github.io/heemod/reference/run_psa.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Probabilistic Uncertainty Analysis — run_psa","title":"Run Probabilistic Uncertainty Analysis — run_psa","text":"Run Probabilistic Uncertainty Analysis","code":""},{"path":"https://aphp.github.io/heemod/reference/run_psa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Probabilistic Uncertainty Analysis — run_psa","text":"","code":"run_psa(model, psa, N, keep = FALSE)"},{"path":"https://aphp.github.io/heemod/reference/run_psa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Probabilistic Uncertainty Analysis — run_psa","text":"model result run_model(). psa Resampling distribution parameters defined define_psa(). N > 0. Number simulation run. keep logical; TRUE, models returned","code":""},{"path":"https://aphp.github.io/heemod/reference/run_psa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Probabilistic Uncertainty Analysis — run_psa","text":"list following elements psa:  data.frame one row per model. run_model: data.frame mean cost utility strategy model: initial model object N: number simulations ran resamp_par: resampled parameters full: keep TRUE, list model objects created iteration","code":""},{"path":"https://aphp.github.io/heemod/reference/run_psa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Probabilistic Uncertainty Analysis — run_psa","text":"","code":"# example for run_psa  mod1 <- define_strategy(   transition = define_transition(     .5, .5,     .1, .9   ),   define_state(     cost = cost_init + age * 5,     ly = 1   ),   define_state(     cost = cost_init + age,     ly = 0   ) ) #> No named state -> generating names. #> No named state -> generating names.  mod2 <- define_strategy(   transition = define_transition(     p_trans, C,     .1, .9   ),   define_state(     cost = 789 * age / 10,     ly = 1   ),   define_state(     cost = 456 * age / 10,     ly = 0   )    ) #> No named state -> generating names. #> No named state -> generating names.  res2 <- run_model(   mod1, mod2,   parameters = define_parameters(     age_init = 60,     cost_init = 1000,     age = age_init + model_time,     p_trans = .7   ),   init = 1:0,   cycles = 10,   cost = cost,   effect = ly ) #> No named model -> generating names.  rsp <- define_psa(   age_init ~ normal(60, 10),   cost_init ~ normal(1000, 100),   p_trans ~ binomial(.7, 100),   correlation = matrix(c(     1,  .4, 0,     .4, 1,  0,     0,  0,  1   ), byrow = TRUE, ncol = 3) )   # with run_model result # (only 10 resample for speed) ndt1 <- run_psa(res2, psa = rsp, N = 10) #> Resampling strategy 'I'... #> Resampling strategy 'I'... #> Resampling strategy 'II'... #> Resampling strategy 'II'..."},{"path":"https://aphp.github.io/heemod/reference/safe_conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely Convert From Characters to Numbers — safe_conversion","title":"Safely Convert From Characters to Numbers — safe_conversion","text":"function return error conversion fails.","code":""},{"path":"https://aphp.github.io/heemod/reference/safe_conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely Convert From Characters to Numbers — safe_conversion","text":"","code":"safe_convert(x, f)  as_numeric_safe(x)  as_integer_safe(x)"},{"path":"https://aphp.github.io/heemod/reference/safe_conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely Convert From Characters to Numbers — safe_conversion","text":"x character vector. f conversion function.","code":""},{"path":"https://aphp.github.io/heemod/reference/safe_conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely Convert From Characters to Numbers — safe_conversion","text":"converted vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/save_outputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Save Model Outputs — save_outputs","title":"Save Model Outputs — save_outputs","text":"Save Model Outputs","code":""},{"path":"https://aphp.github.io/heemod/reference/save_outputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save Model Outputs — save_outputs","text":"","code":"save_outputs(outputs, output_dir, overwrite)"},{"path":"https://aphp.github.io/heemod/reference/save_outputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save Model Outputs — save_outputs","text":"outputs Result run_model_tabular(). output_dir Subdirectory write output. overwrite outputs overwritten?","code":""},{"path":"https://aphp.github.io/heemod/reference/save_outputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save Model Outputs — save_outputs","text":"NULL. Used side effect creating files output directory.","code":""},{"path":"https://aphp.github.io/heemod/reference/set_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Covariates of a Survival Distribution — set_covariates","title":"Set Covariates of a Survival Distribution — set_covariates","text":"Set covariate levels survival model represented survival projections.","code":""},{"path":"https://aphp.github.io/heemod/reference/set_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Covariates of a Survival Distribution — set_covariates","text":"","code":"set_covariates(dist, ..., data = NULL)  set_covariates_(dist, covariates, data = NULL)"},{"path":"https://aphp.github.io/heemod/reference/set_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Covariates of a Survival Distribution — set_covariates","text":"dist survfit flexsurvreg object ... Covariate values representing group survival probabilities generated evaluated. data optional data frame representing multiple sets covariate values survival probabilities generated. Can used generate aggregate survival heterogeneous set subjects. covariates Used work around non-standard evaluation.","code":""},{"path":"https://aphp.github.io/heemod/reference/set_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Covariates of a Survival Distribution — set_covariates","text":"surv_model object.","code":""},{"path":"https://aphp.github.io/heemod/reference/set_covariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Covariates of a Survival Distribution — set_covariates","text":"","code":"fs1 <- flexsurv::flexsurvreg(   survival::Surv(rectime, censrec)~group,   data=flexsurv::bc,   dist = \"llogis\" ) good_model <- set_covariates(fs1, group = \"Good\") cohort <- data.frame(group=c(\"Good\", \"Good\", \"Medium\", \"Poor\")) mixed_model <- set_covariates(fs1, data = cohort)"},{"path":"https://aphp.github.io/heemod/reference/summary.run_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise Markov Model Results — summary.run_model","title":"Summarise Markov Model Results — summary.run_model","text":"Summarise Markov Model Results","code":""},{"path":"https://aphp.github.io/heemod/reference/summary.run_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise Markov Model Results — summary.run_model","text":"","code":"# S3 method for run_model summary(object, threshold = NULL, ...)"},{"path":"https://aphp.github.io/heemod/reference/summary.run_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise Markov Model Results — summary.run_model","text":"object Output run_model(). threshold ICER threshold (possibly several) net monetary benefit computation. ... additional arguments affecting summary produced.","code":""},{"path":"https://aphp.github.io/heemod/reference/summary.run_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise Markov Model Results — summary.run_model","text":"summary_run_model object.","code":""},{"path":"https://aphp.github.io/heemod/reference/summary.surv_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize surv_shift objects — summary.surv_shift","title":"Summarize surv_shift objects — summary.surv_shift","text":"Summarize surv_shift objects","code":""},{"path":"https://aphp.github.io/heemod/reference/summary.surv_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize surv_shift objects — summary.surv_shift","text":"","code":"# S3 method for surv_shift summary(object, summary_type = c(\"plot\", \"standard\"), ...)"},{"path":"https://aphp.github.io/heemod/reference/summary.surv_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize surv_shift objects — summary.surv_shift","text":"object surv_shift object summary_type \"standard\" \"plot\" - \"standard\" usual summary survfit object, \"plot\" fuller version ... arguments","code":""},{"path":"https://aphp.github.io/heemod/reference/summary.surv_shift.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize surv_shift objects — summary.surv_shift","text":"summary.","code":""},{"path":"https://aphp.github.io/heemod/reference/update_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Model on New Data — update_model","title":"Run Model on New Data — update_model","text":"Given table new parameter values new parameter set per line, runs iteratively Markov models sets.","code":""},{"path":"https://aphp.github.io/heemod/reference/update_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Model on New Data — update_model","text":"","code":"# S3 method for run_model update(object, newdata, ...)  # S3 method for updated_model plot(   x,   type = c(\"simple\", \"difference\", \"counts\", \"ce\", \"values\"),   result = c(\"cost\", \"effect\", \"icer\"),   strategy = NULL,   ... )"},{"path":"https://aphp.github.io/heemod/reference/update_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Model on New Data — update_model","text":"object result run_model(). newdata data.frame new parameter sets, one column per parameter one row per parameter set. optional .weights column can included weighted analysis. ... Additional arguments passed geom_histogram. Especially useful specify binwidth. x Updated model plot. type Plot simple values differences? result result plot (see details). strategy model index, character numeric.","code":""},{"path":"https://aphp.github.io/heemod/reference/update_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Model on New Data — update_model","text":"data.frame one row per model/value.","code":""},{"path":"https://aphp.github.io/heemod/reference/update_model.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Model on New Data — update_model","text":"newdata must data.frame following properties: column names must parameter names used define_parameters(); optional column .weights can give respective weight row target population. Weights automatically scaled. weights provided equal weights used strata. plotting function, type argument can take following values: \"cost\", \"effect\" \"icer\" plot heterogeneity respective values. Furthermore \"ce\" \"count\" can produce combined model plots similar run_model().","code":""},{"path":"https://aphp.github.io/heemod/reference/update_model.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Run Model on New Data — update_model","text":"Histograms account weights. hand summary results .","code":""},{"path":"https://aphp.github.io/heemod/reference/update_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Model on New Data — update_model","text":"","code":"mod1 <-   define_strategy(     transition = define_transition(       .5, .5,       .1, .9     ),     define_state(       cost = 543 + age * 5,       ly = 1     ),     define_state(       cost = 432 + age,       ly = 1 * age / 100     )   ) #> No named state -> generating names. #> No named state -> generating names.  mod2 <-   define_strategy(     transition = define_transition(       .5, .5,       .1, .9     ),     define_state(       cost = 789 * age / 10,       ly = 1     ),     define_state(       cost = 456 * age / 10,       ly = 1 * age / 200     )   ) #> No named state -> generating names. #> No named state -> generating names.  res <- run_model(   mod1, mod2,   parameters = define_parameters(     age_init = 60,     age = age_init + model_time   ),   init = 1:0,   cycles = 10,   cost = cost,   effect = ly ) #> No named model -> generating names.  # generating table with new parameter sets new_tab <- data.frame(   age_init = 40:45 )  # with run_model result ndt <- update(res, newdata = new_tab) #> No weights specified in update, using equal weights. #> Updating strategy 'I'... #> Updating strategy 'II'...  summary(ndt) #> An analysis re-run on 6 parameter sets. #>  #> * Unweighted analysis. #>  #> * Values distribution: #>  #>                            Min.       1st Qu.        Median          Mean #> II - Cost          24622.032937  25301.872444  25981.711950  25981.711950 #> II - Effect            4.332100      4.378108      4.424115      4.424115 #> II - Cost Diff.               -             -             -             - #> II - Effect Diff.             -             -             -             - #> II - Icer                     -             -             -             - #> I - Cost            5533.254653   5558.948587   5584.642522   5584.642522 #> I - Effect             6.025414      6.117429      6.209444      6.209444 #> I - Cost Diff.    -21705.360572 -21051.215000 -20397.069428 -20397.069428 #> I - Effect Diff.       1.693313      1.739321      1.785329      1.785329 #> I - Icer          -11561.740443 -11494.795100 -11424.530031 -11421.356676 #>                         3rd Qu.          Max. #> II - Cost          26661.551457  27341.390963 #> II - Effect            4.470123      4.516131 #> II - Cost Diff.               -             - #> II - Effect Diff.             -             - #> II - Icer                     -             - #> I - Cost            5610.336457   5636.030391 #> I - Effect             6.301459      6.393474 #> I - Cost Diff.    -19742.923856 -19088.778285 #> I - Effect Diff.       1.831336      1.877344 #> I - Icer          -11350.699496 -11273.033445 #>  #> * Combined result: #>  #> 2 strategies run for 10 cycles. #>  #> Initial state counts: #>  #> A = 1L #> B = 0L #>  #> Counting method: 'life-table'. #>  #>   #>  #> Counting method: 'beginning'. #>  #>   #>  #> Counting method: 'end'. #>  #> Values: #>  #>         cost       ly #> I   5584.643 6.209444 #> II 25981.712 4.424115 #>  #> Efficiency frontier: #>  #> I #>  #> Differences: #>  #>   Cost Diff. Effect Diff.      ICER Ref. #> I  -20397.07     1.785329 -11424.83   II  # using weights  new_tab2 <- data.frame(   age_init = 40:45,   .weights = runif(6) )  #'\\dontrun{ #'ndt2 <- update(res, newdata = new_tab2) #' #'summary(ndt2) #'}"},{"path":"https://aphp.github.io/heemod/reference/who_mortality.html","id":null,"dir":"Reference","previous_headings":"","what":"Use WHO Mortality Rate — who_mortality","title":"Use WHO Mortality Rate — who_mortality","text":"Returns age sex-specific mortality probabilities given country.","code":""},{"path":"https://aphp.github.io/heemod/reference/who_mortality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use WHO Mortality Rate — who_mortality","text":"","code":"get_who_mr_memo(   age,   sex = NULL,   region = NULL,   country = NULL,   year = \"latest\",   local = FALSE )  get_who_mr(   age,   sex = NULL,   region = NULL,   country = NULL,   year = \"latest\",   local = FALSE )"},{"path":"https://aphp.github.io/heemod/reference/who_mortality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use WHO Mortality Rate — who_mortality","text":"age age continuous variable. sex sex \"FMLE\"-\"MLE\", 0-1 (male = 0, female = 1) 1-2 (male = 1, female = 2). region Region code. Assumed NULL provided along country. country Country code (see details). year Use data year. Defaults \"latest\". local Fetch mortality data package cached data?","code":""},{"path":"https://aphp.github.io/heemod/reference/who_mortality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use WHO Mortality Rate — who_mortality","text":"function used within define_transition() define_parameters().","code":""},{"path":"https://aphp.github.io/heemod/reference/who_mortality.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Use WHO Mortality Rate — who_mortality","text":"Locally cached data used case connection problems, local = TRUE. memory space reasons local data available high-income countries (pooled), latest year. results get_who_mr memoised options(\"heemod.memotime\") (default: 1 hour) increase resampling performance.","code":""},{"path":"https://aphp.github.io/heemod/reference/who_mortality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use WHO Mortality Rate — who_mortality","text":"","code":"define_transition(   C, get_who_mr(age = 50 + model_time, sex = \"FMLE\", country = \"FRA\"),   0, 1 ) #> No named state -> generating names. #> A transition matrix, 2 states. #>  #>   A B                                                                #> A C get_who_mr(age = 50 + model_time, sex = \"FMLE\", country = \"FRA\") #> B   1"},{"path":"https://aphp.github.io/heemod/reference/wtd_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Weighted Summary — wtd_summary","title":"Weighted Summary — wtd_summary","text":"Compute weighted summary numeric vector.","code":""},{"path":"https://aphp.github.io/heemod/reference/wtd_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weighted Summary — wtd_summary","text":"","code":"wtd_summary(x, weights = NULL)"},{"path":"https://aphp.github.io/heemod/reference/wtd_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weighted Summary — wtd_summary","text":"x numeric vector. weights vector weights, length x.","code":""},{"path":"https://aphp.github.io/heemod/reference/wtd_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weighted Summary — wtd_summary","text":"vector values Min., 1st Qu., Median,   Mean, 3rd Qu., Max..","code":""},{"path":"https://aphp.github.io/heemod/reference/wtd_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weighted Summary — wtd_summary","text":"weights NULL unweighted summary returned.","code":""},{"path":[]}]
